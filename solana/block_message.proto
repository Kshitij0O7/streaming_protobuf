syntax = "proto3";
package solana_messages;
option go_package = "streaming_processor_solana/solana_messages";


message Account {

  string      Address = 1;
  bool        IsSigner = 2;
  bool        IsWritable = 3;

  optional string     Owner = 4;

  // if Address is token holder, it contains info on that token ( Mint address )
  // if Address is token itself, it contains info on token
  optional TokenInfo  Token = 5;

}

message TokenInfo {
  string Mint = 2;
  uint32 Decimals = 1;
}

message BalanceUpdate {
  uint64 PreBalance = 1;
  uint64 PostBalance = 2;
  uint32 AccountIndex = 3;
}

message TokenBalanceUpdate {
  uint32 TokenAccountIndex = 1;
  BalanceUpdate BalanceUpdate = 2;
}

message Instruction {
  uint32 ProgramAccountIndex = 1;
  uint64 CallerIndex = 2;
  uint64 InnerIndex = 3;
  uint64 NestingLevel = 4;
  bytes  Data = 5;
  repeated uint32 AccountIndexes = 6;
  repeated BalanceUpdate BalanceUpdates = 7;
  repeated TokenBalanceUpdate TokenBalanceUpdates = 8;
}

message TransactionHeader {
  uint64 Fee = 1;
  string FeePayer = 2;
  string RecentBlockhash = 3;
  string Signer = 4; 
  repeated string Signatures = 5;
  repeated Account Accounts = 6;
}

enum RewardType {
  RewardTypeUnknown = 0;
  Fee = 1;
  Rent = 2;
  Staking = 3;
  Voting = 4;
}

message Reward {
  string Address = 1;
  int64 Amount = 2;
  uint64 PostBalance = 3;
  RewardType RewardType = 4;
  uint64 Commission = 5;
}

message TransactionStatus {
  bool Success = 1;
  string ErrorMessage = 2;
}

message Transaction {
  string Signature = 1;
  TransactionStatus Status = 2;
  TransactionHeader Header = 3;
  repeated BalanceUpdate TotalBalanceUpdates = 4;
  repeated TokenBalanceUpdate TotalTokenBalanceUpdates = 5;
  repeated Instruction Instructions = 7;
  repeated string Logs = 8;
  uint64 Index = 9;
}

message BlockHeader {
  uint64 Slot = 1;
  string Hash = 2;
  uint64 ParentSlot = 4;
  uint64 Height = 5;
  int64 Timestamp = 6;
  string ParentHash = 7;
}

message BlockMessage {
  BlockHeader Header = 1;
  repeated Reward Rewards = 2;
  repeated Transaction Transactions = 3;
}

message BlockDescriptor {
  string ChainId = 2;
  string BlockHash = 3;
  uint64 BlockNumber = 4;
  uint64 ParentNumber = 5;
  int64 Timestamp = 6;
  uint64 TransactionsCount = 7;
  uint64 MessageSize = 8;
  bytes Checksum = 9;
  string Height = 10;
  string ParentHash = 11;
}
