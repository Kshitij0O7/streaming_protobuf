// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.3
// source: market/trades.proto

package marketdata_messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Symbol string `protobuf:"bytes,3,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
}

func (x *Currency) Reset() {
	*x = Currency{}
	mi := &file_market_trades_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_market_trades_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_market_trades_proto_rawDescGZIP(), []int{0}
}

func (x *Currency) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Currency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Currency) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type TradedCurrency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *Token    `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	Currency *Currency `protobuf:"bytes,2,opt,name=Currency,proto3" json:"Currency,omitempty"`
}

func (x *TradedCurrency) Reset() {
	*x = TradedCurrency{}
	mi := &file_market_trades_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradedCurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradedCurrency) ProtoMessage() {}

func (x *TradedCurrency) ProtoReflect() protoreflect.Message {
	mi := &file_market_trades_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradedCurrency.ProtoReflect.Descriptor instead.
func (*TradedCurrency) Descriptor() ([]byte, []int) {
	return file_market_trades_proto_rawDescGZIP(), []int{1}
}

func (x *TradedCurrency) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *TradedCurrency) GetCurrency() *Currency {
	if x != nil {
		return x.Currency
	}
	return nil
}

type Pair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolName    string          `protobuf:"bytes,1,opt,name=ProtocolName,proto3" json:"ProtocolName,omitempty"`
	ProtocolFamily  string          `protobuf:"bytes,2,opt,name=ProtocolFamily,proto3" json:"ProtocolFamily,omitempty"`
	ProtocolVersion string          `protobuf:"bytes,3,opt,name=ProtocolVersion,proto3" json:"ProtocolVersion,omitempty"`
	SmartContract   []byte          `protobuf:"bytes,4,opt,name=SmartContract,proto3" json:"SmartContract,omitempty"`
	OwnerAddress    []byte          `protobuf:"bytes,5,opt,name=OwnerAddress,proto3" json:"OwnerAddress,omitempty"`
	PairAddress     []byte          `protobuf:"bytes,6,opt,name=PairAddress,proto3" json:"PairAddress,omitempty"`
	Buy             *TradedCurrency `protobuf:"bytes,7,opt,name=Buy,proto3" json:"Buy,omitempty"`
	Sell            *TradedCurrency `protobuf:"bytes,8,opt,name=Sell,proto3" json:"Sell,omitempty"`
	Trades          []*Trade        `protobuf:"bytes,9,rep,name=Trades,proto3" json:"Trades,omitempty"`
}

func (x *Pair) Reset() {
	*x = Pair{}
	mi := &file_market_trades_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pair) ProtoMessage() {}

func (x *Pair) ProtoReflect() protoreflect.Message {
	mi := &file_market_trades_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pair.ProtoReflect.Descriptor instead.
func (*Pair) Descriptor() ([]byte, []int) {
	return file_market_trades_proto_rawDescGZIP(), []int{2}
}

func (x *Pair) GetProtocolName() string {
	if x != nil {
		return x.ProtocolName
	}
	return ""
}

func (x *Pair) GetProtocolFamily() string {
	if x != nil {
		return x.ProtocolFamily
	}
	return ""
}

func (x *Pair) GetProtocolVersion() string {
	if x != nil {
		return x.ProtocolVersion
	}
	return ""
}

func (x *Pair) GetSmartContract() []byte {
	if x != nil {
		return x.SmartContract
	}
	return nil
}

func (x *Pair) GetOwnerAddress() []byte {
	if x != nil {
		return x.OwnerAddress
	}
	return nil
}

func (x *Pair) GetPairAddress() []byte {
	if x != nil {
		return x.PairAddress
	}
	return nil
}

func (x *Pair) GetBuy() *TradedCurrency {
	if x != nil {
		return x.Buy
	}
	return nil
}

func (x *Pair) GetSell() *TradedCurrency {
	if x != nil {
		return x.Sell
	}
	return nil
}

func (x *Pair) GetTrades() []*Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buy  *Asset `protobuf:"bytes,1,opt,name=Buy,proto3" json:"Buy,omitempty"`
	Sell *Asset `protobuf:"bytes,2,opt,name=Sell,proto3" json:"Sell,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	mi := &file_market_trades_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_market_trades_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_market_trades_proto_rawDescGZIP(), []int{3}
}

func (x *Trade) GetBuy() *Asset {
	if x != nil {
		return x.Buy
	}
	return nil
}

func (x *Trade) GetSell() *Asset {
	if x != nil {
		return x.Sell
	}
	return nil
}

type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount float64 `protobuf:"fixed64,1,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Id     []byte  `protobuf:"bytes,2,opt,name=Id,proto3" json:"Id,omitempty"`
	URI    string  `protobuf:"bytes,3,opt,name=URI,proto3" json:"URI,omitempty"`
	Data   []byte  `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	mi := &file_market_trades_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_market_trades_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_market_trades_proto_rawDescGZIP(), []int{4}
}

func (x *Asset) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Asset) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Asset) GetURI() string {
	if x != nil {
		return x.URI
	}
	return ""
}

func (x *Asset) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type TradesMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    uint64  `protobuf:"varint,1,opt,name=Time,proto3" json:"Time,omitempty"`
	Network string  `protobuf:"bytes,2,opt,name=Network,proto3" json:"Network,omitempty"`
	Pairs   []*Pair `protobuf:"bytes,3,rep,name=Pairs,proto3" json:"Pairs,omitempty"`
}

func (x *TradesMessage) Reset() {
	*x = TradesMessage{}
	mi := &file_market_trades_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradesMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesMessage) ProtoMessage() {}

func (x *TradesMessage) ProtoReflect() protoreflect.Message {
	mi := &file_market_trades_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesMessage.ProtoReflect.Descriptor instead.
func (*TradesMessage) Descriptor() ([]byte, []int) {
	return file_market_trades_proto_rawDescGZIP(), []int{5}
}

func (x *TradesMessage) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TradesMessage) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *TradesMessage) GetPairs() []*Pair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

var File_market_trades_proto protoreflect.FileDescriptor

var file_market_trades_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x17, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x46, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x7d, 0x0a, 0x0e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x30, 0x0a,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x39, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x8c, 0x03, 0x0a, 0x04, 0x50,
	0x61, 0x69, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12,
	0x28, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x6d, 0x61,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x61, 0x69, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x50, 0x61, 0x69, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x03, 0x42, 0x75, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x03, 0x42, 0x75, 0x79, 0x12, 0x37, 0x0a, 0x04,
	0x53, 0x65, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x04, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x32, 0x0a, 0x06, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x06, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x05, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x42, 0x75, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x03, 0x42, 0x75, 0x79,
	0x12, 0x2e, 0x0a, 0x04, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x04, 0x53, 0x65, 0x6c, 0x6c,
	0x22, 0x55, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x55, 0x52, 0x49, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x6e, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2f, 0x0a, 0x05, 0x50, 0x61, 0x69, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x05, 0x50, 0x61, 0x69, 0x72, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_market_trades_proto_rawDescOnce sync.Once
	file_market_trades_proto_rawDescData = file_market_trades_proto_rawDesc
)

func file_market_trades_proto_rawDescGZIP() []byte {
	file_market_trades_proto_rawDescOnce.Do(func() {
		file_market_trades_proto_rawDescData = protoimpl.X.CompressGZIP(file_market_trades_proto_rawDescData)
	})
	return file_market_trades_proto_rawDescData
}

var file_market_trades_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_market_trades_proto_goTypes = []any{
	(*Currency)(nil),       // 0: marketdata_messages.Currency
	(*TradedCurrency)(nil), // 1: marketdata_messages.TradedCurrency
	(*Pair)(nil),           // 2: marketdata_messages.Pair
	(*Trade)(nil),          // 3: marketdata_messages.Trade
	(*Asset)(nil),          // 4: marketdata_messages.Asset
	(*TradesMessage)(nil),  // 5: marketdata_messages.TradesMessage
	(*Token)(nil),          // 6: marketdata_messages.Token
}
var file_market_trades_proto_depIdxs = []int32{
	6, // 0: marketdata_messages.TradedCurrency.Token:type_name -> marketdata_messages.Token
	0, // 1: marketdata_messages.TradedCurrency.Currency:type_name -> marketdata_messages.Currency
	1, // 2: marketdata_messages.Pair.Buy:type_name -> marketdata_messages.TradedCurrency
	1, // 3: marketdata_messages.Pair.Sell:type_name -> marketdata_messages.TradedCurrency
	3, // 4: marketdata_messages.Pair.Trades:type_name -> marketdata_messages.Trade
	4, // 5: marketdata_messages.Trade.Buy:type_name -> marketdata_messages.Asset
	4, // 6: marketdata_messages.Trade.Sell:type_name -> marketdata_messages.Asset
	2, // 7: marketdata_messages.TradesMessage.Pairs:type_name -> marketdata_messages.Pair
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_market_trades_proto_init() }
func file_market_trades_proto_init() {
	if File_market_trades_proto != nil {
		return
	}
	file_market_marketdata_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_market_trades_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_market_trades_proto_goTypes,
		DependencyIndexes: file_market_trades_proto_depIdxs,
		MessageInfos:      file_market_trades_proto_msgTypes,
	}.Build()
	File_market_trades_proto = out.File
	file_market_trades_proto_rawDesc = nil
	file_market_trades_proto_goTypes = nil
	file_market_trades_proto_depIdxs = nil
}
