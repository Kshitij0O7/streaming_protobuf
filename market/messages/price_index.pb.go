// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.3
// source: market/price_index.proto

package marketdata_messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Symbol string `protobuf:"bytes,3,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
}

func (x *Currency) Reset() {
	*x = Currency{}
	mi := &file_market_price_index_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_market_price_index_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_market_price_index_proto_rawDescGZIP(), []int{0}
}

func (x *Currency) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Currency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Currency) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type TimeInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start uint32 `protobuf:"varint,1,opt,name=Start,proto3" json:"Start,omitempty"`
	End   uint32 `protobuf:"varint,2,opt,name=End,proto3" json:"End,omitempty"`
}

func (x *TimeInterval) Reset() {
	*x = TimeInterval{}
	mi := &file_market_price_index_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeInterval) ProtoMessage() {}

func (x *TimeInterval) ProtoReflect() protoreflect.Message {
	mi := &file_market_price_index_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeInterval.ProtoReflect.Descriptor instead.
func (*TimeInterval) Descriptor() ([]byte, []int) {
	return file_market_price_index_proto_rawDescGZIP(), []int{1}
}

func (x *TimeInterval) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *TimeInterval) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

type AveragePrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeInterval *TimeInterval `protobuf:"bytes,1,opt,name=TimeInterval,proto3" json:"TimeInterval,omitempty"`
	PriceInUsd   float64       `protobuf:"fixed64,2,opt,name=PriceInUsd,proto3" json:"PriceInUsd,omitempty"`
	UsdAmount    float64       `protobuf:"fixed64,3,opt,name=UsdAmount,proto3" json:"UsdAmount,omitempty"`
	TokenAmount  float64       `protobuf:"fixed64,4,opt,name=TokenAmount,proto3" json:"TokenAmount,omitempty"`
}

func (x *AveragePrice) Reset() {
	*x = AveragePrice{}
	mi := &file_market_price_index_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AveragePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AveragePrice) ProtoMessage() {}

func (x *AveragePrice) ProtoReflect() protoreflect.Message {
	mi := &file_market_price_index_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AveragePrice.ProtoReflect.Descriptor instead.
func (*AveragePrice) Descriptor() ([]byte, []int) {
	return file_market_price_index_proto_rawDescGZIP(), []int{2}
}

func (x *AveragePrice) GetTimeInterval() *TimeInterval {
	if x != nil {
		return x.TimeInterval
	}
	return nil
}

func (x *AveragePrice) GetPriceInUsd() float64 {
	if x != nil {
		return x.PriceInUsd
	}
	return 0
}

func (x *AveragePrice) GetUsdAmount() float64 {
	if x != nil {
		return x.UsdAmount
	}
	return 0
}

func (x *AveragePrice) GetTokenAmount() float64 {
	if x != nil {
		return x.TokenAmount
	}
	return 0
}

type OhlcPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeInterval *TimeInterval `protobuf:"bytes,1,opt,name=TimeInterval,proto3" json:"TimeInterval,omitempty"`
	Open         float64       `protobuf:"fixed64,2,opt,name=Open,proto3" json:"Open,omitempty"`
	Close        float64       `protobuf:"fixed64,3,opt,name=Close,proto3" json:"Close,omitempty"`
	High         float64       `protobuf:"fixed64,4,opt,name=High,proto3" json:"High,omitempty"`
	Low          float64       `protobuf:"fixed64,5,opt,name=Low,proto3" json:"Low,omitempty"`
	Volume       float64       `protobuf:"fixed64,6,opt,name=Volume,proto3" json:"Volume,omitempty"`
}

func (x *OhlcPrice) Reset() {
	*x = OhlcPrice{}
	mi := &file_market_price_index_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OhlcPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OhlcPrice) ProtoMessage() {}

func (x *OhlcPrice) ProtoReflect() protoreflect.Message {
	mi := &file_market_price_index_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OhlcPrice.ProtoReflect.Descriptor instead.
func (*OhlcPrice) Descriptor() ([]byte, []int) {
	return file_market_price_index_proto_rawDescGZIP(), []int{3}
}

func (x *OhlcPrice) GetTimeInterval() *TimeInterval {
	if x != nil {
		return x.TimeInterval
	}
	return nil
}

func (x *OhlcPrice) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *OhlcPrice) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *OhlcPrice) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *OhlcPrice) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *OhlcPrice) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type AveragePriceByPeriods struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Period1Second   *AveragePrice `protobuf:"bytes,1,opt,name=Period1Second,proto3" json:"Period1Second,omitempty"`
	Period10Seconds *AveragePrice `protobuf:"bytes,2,opt,name=Period10Seconds,proto3" json:"Period10Seconds,omitempty"`
	Period1Minute   *AveragePrice `protobuf:"bytes,3,opt,name=Period1Minute,proto3" json:"Period1Minute,omitempty"`
	Period10Minutes *AveragePrice `protobuf:"bytes,4,opt,name=Period10Minutes,proto3" json:"Period10Minutes,omitempty"`
	Period1Hour     *AveragePrice `protobuf:"bytes,5,opt,name=Period1Hour,proto3" json:"Period1Hour,omitempty"`
}

func (x *AveragePriceByPeriods) Reset() {
	*x = AveragePriceByPeriods{}
	mi := &file_market_price_index_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AveragePriceByPeriods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AveragePriceByPeriods) ProtoMessage() {}

func (x *AveragePriceByPeriods) ProtoReflect() protoreflect.Message {
	mi := &file_market_price_index_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AveragePriceByPeriods.ProtoReflect.Descriptor instead.
func (*AveragePriceByPeriods) Descriptor() ([]byte, []int) {
	return file_market_price_index_proto_rawDescGZIP(), []int{4}
}

func (x *AveragePriceByPeriods) GetPeriod1Second() *AveragePrice {
	if x != nil {
		return x.Period1Second
	}
	return nil
}

func (x *AveragePriceByPeriods) GetPeriod10Seconds() *AveragePrice {
	if x != nil {
		return x.Period10Seconds
	}
	return nil
}

func (x *AveragePriceByPeriods) GetPeriod1Minute() *AveragePrice {
	if x != nil {
		return x.Period1Minute
	}
	return nil
}

func (x *AveragePriceByPeriods) GetPeriod10Minutes() *AveragePrice {
	if x != nil {
		return x.Period10Minutes
	}
	return nil
}

func (x *AveragePriceByPeriods) GetPeriod1Hour() *AveragePrice {
	if x != nil {
		return x.Period1Hour
	}
	return nil
}

type AveragePriceByVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume1KUsd   *AveragePrice `protobuf:"bytes,1,opt,name=Volume1KUsd,proto3" json:"Volume1KUsd,omitempty"`
	Volume10KUsd  *AveragePrice `protobuf:"bytes,2,opt,name=Volume10KUsd,proto3" json:"Volume10KUsd,omitempty"`
	Volume100KUsd *AveragePrice `protobuf:"bytes,3,opt,name=Volume100KUsd,proto3" json:"Volume100KUsd,omitempty"`
	Volume1MUsd   *AveragePrice `protobuf:"bytes,4,opt,name=Volume1MUsd,proto3" json:"Volume1MUsd,omitempty"`
}

func (x *AveragePriceByVolume) Reset() {
	*x = AveragePriceByVolume{}
	mi := &file_market_price_index_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AveragePriceByVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AveragePriceByVolume) ProtoMessage() {}

func (x *AveragePriceByVolume) ProtoReflect() protoreflect.Message {
	mi := &file_market_price_index_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AveragePriceByVolume.ProtoReflect.Descriptor instead.
func (*AveragePriceByVolume) Descriptor() ([]byte, []int) {
	return file_market_price_index_proto_rawDescGZIP(), []int{5}
}

func (x *AveragePriceByVolume) GetVolume1KUsd() *AveragePrice {
	if x != nil {
		return x.Volume1KUsd
	}
	return nil
}

func (x *AveragePriceByVolume) GetVolume10KUsd() *AveragePrice {
	if x != nil {
		return x.Volume10KUsd
	}
	return nil
}

func (x *AveragePriceByVolume) GetVolume100KUsd() *AveragePrice {
	if x != nil {
		return x.Volume100KUsd
	}
	return nil
}

func (x *AveragePriceByVolume) GetVolume1MUsd() *AveragePrice {
	if x != nil {
		return x.Volume1MUsd
	}
	return nil
}

type PairUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base        *Token  `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	Quote       *Token  `protobuf:"bytes,2,opt,name=Quote,proto3" json:"Quote,omitempty"`
	BaseAmount  float64 `protobuf:"fixed64,3,opt,name=BaseAmount,proto3" json:"BaseAmount,omitempty"`
	QuoteAmount float64 `protobuf:"fixed64,4,opt,name=QuoteAmount,proto3" json:"QuoteAmount,omitempty"`
	UsdAmount   float64 `protobuf:"fixed64,5,opt,name=UsdAmount,proto3" json:"UsdAmount,omitempty"`
}

func (x *PairUpdate) Reset() {
	*x = PairUpdate{}
	mi := &file_market_price_index_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PairUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PairUpdate) ProtoMessage() {}

func (x *PairUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_market_price_index_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PairUpdate.ProtoReflect.Descriptor instead.
func (*PairUpdate) Descriptor() ([]byte, []int) {
	return file_market_price_index_proto_rawDescGZIP(), []int{6}
}

func (x *PairUpdate) GetBase() *Token {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *PairUpdate) GetQuote() *Token {
	if x != nil {
		return x.Quote
	}
	return nil
}

func (x *PairUpdate) GetBaseAmount() float64 {
	if x != nil {
		return x.BaseAmount
	}
	return 0
}

func (x *PairUpdate) GetQuoteAmount() float64 {
	if x != nil {
		return x.QuoteAmount
	}
	return 0
}

func (x *PairUpdate) GetUsdAmount() float64 {
	if x != nil {
		return x.UsdAmount
	}
	return 0
}

type CurrencyUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency                    *Currency              `protobuf:"bytes,1,opt,name=Currency,proto3" json:"Currency,omitempty"`
	PairUpdates                 []*PairUpdate          `protobuf:"bytes,2,rep,name=PairUpdates,proto3" json:"PairUpdates,omitempty"`
	OhlcPrice                   *OhlcPrice             `protobuf:"bytes,3,opt,name=OhlcPrice,proto3" json:"OhlcPrice,omitempty"`
	SimpleMovingAverage         *AveragePriceByPeriods `protobuf:"bytes,4,opt,name=SimpleMovingAverage,proto3" json:"SimpleMovingAverage,omitempty"`
	WeightedSimpleMovingAverage *AveragePriceByPeriods `protobuf:"bytes,5,opt,name=WeightedSimpleMovingAverage,proto3" json:"WeightedSimpleMovingAverage,omitempty"`
	ExponentialMovingAverage    *AveragePriceByPeriods `protobuf:"bytes,6,opt,name=ExponentialMovingAverage,proto3" json:"ExponentialMovingAverage,omitempty"`
	SmoothedMovingAverage       *AveragePriceByPeriods `protobuf:"bytes,7,opt,name=SmoothedMovingAverage,proto3" json:"SmoothedMovingAverage,omitempty"`
	AveragePriceByVolume        *AveragePriceByVolume  `protobuf:"bytes,8,opt,name=AveragePriceByVolume,proto3" json:"AveragePriceByVolume,omitempty"`
}

func (x *CurrencyUpdate) Reset() {
	*x = CurrencyUpdate{}
	mi := &file_market_price_index_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrencyUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyUpdate) ProtoMessage() {}

func (x *CurrencyUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_market_price_index_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyUpdate.ProtoReflect.Descriptor instead.
func (*CurrencyUpdate) Descriptor() ([]byte, []int) {
	return file_market_price_index_proto_rawDescGZIP(), []int{7}
}

func (x *CurrencyUpdate) GetCurrency() *Currency {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *CurrencyUpdate) GetPairUpdates() []*PairUpdate {
	if x != nil {
		return x.PairUpdates
	}
	return nil
}

func (x *CurrencyUpdate) GetOhlcPrice() *OhlcPrice {
	if x != nil {
		return x.OhlcPrice
	}
	return nil
}

func (x *CurrencyUpdate) GetSimpleMovingAverage() *AveragePriceByPeriods {
	if x != nil {
		return x.SimpleMovingAverage
	}
	return nil
}

func (x *CurrencyUpdate) GetWeightedSimpleMovingAverage() *AveragePriceByPeriods {
	if x != nil {
		return x.WeightedSimpleMovingAverage
	}
	return nil
}

func (x *CurrencyUpdate) GetExponentialMovingAverage() *AveragePriceByPeriods {
	if x != nil {
		return x.ExponentialMovingAverage
	}
	return nil
}

func (x *CurrencyUpdate) GetSmoothedMovingAverage() *AveragePriceByPeriods {
	if x != nil {
		return x.SmoothedMovingAverage
	}
	return nil
}

func (x *CurrencyUpdate) GetAveragePriceByVolume() *AveragePriceByVolume {
	if x != nil {
		return x.AveragePriceByVolume
	}
	return nil
}

type PriceIndexMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time            uint64            `protobuf:"varint,1,opt,name=Time,proto3" json:"Time,omitempty"`
	CurrencyUpdates []*CurrencyUpdate `protobuf:"bytes,2,rep,name=CurrencyUpdates,proto3" json:"CurrencyUpdates,omitempty"`
}

func (x *PriceIndexMessage) Reset() {
	*x = PriceIndexMessage{}
	mi := &file_market_price_index_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriceIndexMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceIndexMessage) ProtoMessage() {}

func (x *PriceIndexMessage) ProtoReflect() protoreflect.Message {
	mi := &file_market_price_index_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceIndexMessage.ProtoReflect.Descriptor instead.
func (*PriceIndexMessage) Descriptor() ([]byte, []int) {
	return file_market_price_index_proto_rawDescGZIP(), []int{8}
}

func (x *PriceIndexMessage) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *PriceIndexMessage) GetCurrencyUpdates() []*CurrencyUpdate {
	if x != nil {
		return x.CurrencyUpdates
	}
	return nil
}

var File_market_price_index_proto protoreflect.FileDescriptor

var file_market_price_index_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a,
	0x17, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x46, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x22, 0x36, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x0c, 0x41, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x54, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x52, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x55, 0x73, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x55, 0x73, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x55, 0x73, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xba, 0x01, 0x0a, 0x09, 0x4f, 0x68, 0x6c, 0x63, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x45,
	0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x48, 0x69, 0x67, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x48,
	0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x4c, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x88, 0x03,
	0x0a, 0x15, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x31, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x0d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x31, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x12, 0x4b, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x31, 0x30, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0f, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x31, 0x30, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x47, 0x0a,
	0x0d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x31, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x31,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x31, 0x30, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x0f, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x31, 0x30, 0x4d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x31, 0x48, 0x6f,
	0x75, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x31, 0x48, 0x6f, 0x75, 0x72, 0x22, 0xb0, 0x02, 0x0a, 0x14, 0x41, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x43, 0x0a, 0x0b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x4b, 0x55, 0x73, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x31, 0x4b, 0x55, 0x73, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x31, 0x30, 0x4b, 0x55, 0x73, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x30, 0x4b, 0x55, 0x73, 0x64, 0x12, 0x47, 0x0a,
	0x0d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x30, 0x30, 0x4b, 0x55, 0x73, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31,
	0x30, 0x30, 0x4b, 0x55, 0x73, 0x64, 0x12, 0x43, 0x0a, 0x0b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x31, 0x4d, 0x55, 0x73, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0b,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x4d, 0x55, 0x73, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x0a,
	0x50, 0x61, 0x69, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x42, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x04, 0x42, 0x61, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x42, 0x61, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x42, 0x61, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x55, 0x73, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x55, 0x73, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc1, 0x05, 0x0a,
	0x0e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x39, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x41, 0x0a, 0x0b, 0x50, 0x61,
	0x69, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x0b, 0x50, 0x61, 0x69, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a,
	0x09, 0x4f, 0x68, 0x6c, 0x63, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4f, 0x68, 0x6c, 0x63, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x09, 0x4f, 0x68, 0x6c, 0x63, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x13, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x73, 0x52, 0x13, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x6f, 0x76, 0x69,
	0x6e, 0x67, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x6c, 0x0a, 0x1b, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x64, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x6e,
	0x67, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x42, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x52, 0x1b, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x64, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x66, 0x0a, 0x18, 0x45, 0x78, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x73, 0x52, 0x18, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x60, 0x0a, 0x15, 0x53, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x6e,
	0x67, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x42, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x52, 0x15, 0x53, 0x6d, 0x6f, 0x6f,
	0x74, 0x68, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x5d, 0x0a, 0x14, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x14, 0x41, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x22, 0x76, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_market_price_index_proto_rawDescOnce sync.Once
	file_market_price_index_proto_rawDescData = file_market_price_index_proto_rawDesc
)

func file_market_price_index_proto_rawDescGZIP() []byte {
	file_market_price_index_proto_rawDescOnce.Do(func() {
		file_market_price_index_proto_rawDescData = protoimpl.X.CompressGZIP(file_market_price_index_proto_rawDescData)
	})
	return file_market_price_index_proto_rawDescData
}

var file_market_price_index_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_market_price_index_proto_goTypes = []any{
	(*Currency)(nil),              // 0: marketdata_messages.Currency
	(*TimeInterval)(nil),          // 1: marketdata_messages.TimeInterval
	(*AveragePrice)(nil),          // 2: marketdata_messages.AveragePrice
	(*OhlcPrice)(nil),             // 3: marketdata_messages.OhlcPrice
	(*AveragePriceByPeriods)(nil), // 4: marketdata_messages.AveragePriceByPeriods
	(*AveragePriceByVolume)(nil),  // 5: marketdata_messages.AveragePriceByVolume
	(*PairUpdate)(nil),            // 6: marketdata_messages.PairUpdate
	(*CurrencyUpdate)(nil),        // 7: marketdata_messages.CurrencyUpdate
	(*PriceIndexMessage)(nil),     // 8: marketdata_messages.PriceIndexMessage
	(*Token)(nil),                 // 9: marketdata_messages.Token
}
var file_market_price_index_proto_depIdxs = []int32{
	1,  // 0: marketdata_messages.AveragePrice.TimeInterval:type_name -> marketdata_messages.TimeInterval
	1,  // 1: marketdata_messages.OhlcPrice.TimeInterval:type_name -> marketdata_messages.TimeInterval
	2,  // 2: marketdata_messages.AveragePriceByPeriods.Period1Second:type_name -> marketdata_messages.AveragePrice
	2,  // 3: marketdata_messages.AveragePriceByPeriods.Period10Seconds:type_name -> marketdata_messages.AveragePrice
	2,  // 4: marketdata_messages.AveragePriceByPeriods.Period1Minute:type_name -> marketdata_messages.AveragePrice
	2,  // 5: marketdata_messages.AveragePriceByPeriods.Period10Minutes:type_name -> marketdata_messages.AveragePrice
	2,  // 6: marketdata_messages.AveragePriceByPeriods.Period1Hour:type_name -> marketdata_messages.AveragePrice
	2,  // 7: marketdata_messages.AveragePriceByVolume.Volume1KUsd:type_name -> marketdata_messages.AveragePrice
	2,  // 8: marketdata_messages.AveragePriceByVolume.Volume10KUsd:type_name -> marketdata_messages.AveragePrice
	2,  // 9: marketdata_messages.AveragePriceByVolume.Volume100KUsd:type_name -> marketdata_messages.AveragePrice
	2,  // 10: marketdata_messages.AveragePriceByVolume.Volume1MUsd:type_name -> marketdata_messages.AveragePrice
	9,  // 11: marketdata_messages.PairUpdate.Base:type_name -> marketdata_messages.Token
	9,  // 12: marketdata_messages.PairUpdate.Quote:type_name -> marketdata_messages.Token
	0,  // 13: marketdata_messages.CurrencyUpdate.Currency:type_name -> marketdata_messages.Currency
	6,  // 14: marketdata_messages.CurrencyUpdate.PairUpdates:type_name -> marketdata_messages.PairUpdate
	3,  // 15: marketdata_messages.CurrencyUpdate.OhlcPrice:type_name -> marketdata_messages.OhlcPrice
	4,  // 16: marketdata_messages.CurrencyUpdate.SimpleMovingAverage:type_name -> marketdata_messages.AveragePriceByPeriods
	4,  // 17: marketdata_messages.CurrencyUpdate.WeightedSimpleMovingAverage:type_name -> marketdata_messages.AveragePriceByPeriods
	4,  // 18: marketdata_messages.CurrencyUpdate.ExponentialMovingAverage:type_name -> marketdata_messages.AveragePriceByPeriods
	4,  // 19: marketdata_messages.CurrencyUpdate.SmoothedMovingAverage:type_name -> marketdata_messages.AveragePriceByPeriods
	5,  // 20: marketdata_messages.CurrencyUpdate.AveragePriceByVolume:type_name -> marketdata_messages.AveragePriceByVolume
	7,  // 21: marketdata_messages.PriceIndexMessage.CurrencyUpdates:type_name -> marketdata_messages.CurrencyUpdate
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_market_price_index_proto_init() }
func file_market_price_index_proto_init() {
	if File_market_price_index_proto != nil {
		return
	}
	file_market_marketdata_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_market_price_index_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_market_price_index_proto_goTypes,
		DependencyIndexes: file_market_price_index_proto_depIdxs,
		MessageInfos:      file_market_price_index_proto_msgTypes,
	}.Build()
	File_market_price_index_proto = out.File
	file_market_price_index_proto_rawDesc = nil
	file_market_price_index_proto_goTypes = nil
	file_market_price_index_proto_depIdxs = nil
}
