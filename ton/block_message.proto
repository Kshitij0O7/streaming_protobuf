syntax = "proto3";

package ton_messages;

message BlockID {
  int32 Workchain = 1;
  uint64 Shard = 2;
  uint32 Seqno = 3;

  // base64 format
	bytes RootHash = 4;
	bytes FileHash = 5;
}

message GenSoftware {
  uint32 Version = 1;
  uint64 Capabilities = 2;
}

// message ValueFlow {
// }
//

message TransactionHeader {
  bytes Hash = 1;
  uint64 LT = 2;
  string Type = 3;
  // base64 format
  bytes Account = 4;
  uint64 PrevTransactionLT = 5;
  bytes PrevTransactionHash = 6;
	// StorageFee collected during the Storage Phase.
  uint64 StorageFee = 7;
	// TotalFee is the original total_fee of a transaction directly from the blockchain.
  uint64 TotalFee = 8;
  uint32 Utime = 9;
	bool Aborted = 10;
	bool Destroyed = 11;
  bytes SourceBoc = 12;
}

message ComputePhase {
  bool Skipped = 1;
	string SkipReason = 2;
	bool Success = 3;
	uint64 GasFees = 4;
	string GasUsed = 5;
	uint32 VmSteps = 6;
	int32 ExitCode = 7;
}

message StoragePhase {
  uint64 FeesCollected = 1;
	uint64 FeesDue = 2;
	string StatusChange = 3;
}

message CreditPhase {
	uint64 DueFeesCollected = 1;
  uint64 Grams = 2;
}

message ActionPhase {
	bool Success = 1;
	bool Valid = 2;
	bool NoFunds = 3;
	string StatusChangeName = 4;
	uint64 TotalFwdFees = 5;
	uint64 TotalActionFees = 6;
	int32 ResultCode = 7;
	int32 ResultArg = 8;
	uint32 TotalActions = 9;
	uint32 SpecActions = 10;
  uint32 SkippedActions = 11;
  uint32 MsgsCreated = 12;
}

message BouncePhase {
	string PhaseType = 1;
}

message TransOrd {
  ComputePhase ComputePhase = 1;
  StoragePhase StoragePhase = 2;
  CreditPhase CreditPhase = 3;
  ActionPhase ActionPhase = 4;
  BouncePhase BouncePhase = 5;
}

message TransStorage {
  StoragePhase StoragePhase = 1;
}

message TransTickTock {
  ComputePhase ComputePhase = 1;
  StoragePhase StoragePhase = 2;
  ActionPhase ActionPhase = 3;
}

message TransSplitPrepare {
  ComputePhase ComputePhase = 1;
  StoragePhase StoragePhase = 2;
  ActionPhase ActionPhase = 3;
}

message TransMergePrepare {
  StoragePhase StoragePhase = 1;
}

message TransMergeInstall {
  ComputePhase ComputePhase = 1;
  StoragePhase StoragePhase = 2;
  CreditPhase CreditPhase = 3;
  ActionPhase ActionPhase = 4;
}

message BlockExtra {
  bytes RandSeed = 1;
  bytes CreatedBy = 2;
  uint32 InMsgDescrLength = 3;
  uint32 OutMsgDescrLength = 4;
}

message Chain {
  bytes ChainId = 1;
}

message BlockHeader {
  BlockID BlockID = 1;
  BlockID MasterBlock = 2;
  repeated BlockID PrevBlocks = 3;

  uint64 StartLt = 4;
  uint64 EndLt = 5;
  bool MasterChain = 6;
  uint32 GenUtime = 7;
  int32 GlobalID = 8;
  uint32 Version = 9;
  int32 Flag = 10;
  bool AfterMerge = 11;
  bool AfterSplit = 12;
  bool BeforeSplit = 13;
  bool WantMerge = 14;
  bool WantSplit = 15;
  uint32 GenValidatorListHashShort = 16;
  uint32 GenCatchainSeqno = 17;
  uint32 MinRefMcSeqno = 18;
  bool KeyBlock = 19;
  uint32 PrevKeyBlockSeqno = 20;
  uint32 VertSeqno = 21;

	// GenSoftware describes software that created this particular block.
	// It is up to the software to include this piece of information.
  GenSoftware GenSoftware = 22;

	// ValueFlow   ValueFlow = 23;
	BlockExtra BlockExtra = 24;

  int64 TransactionsCount = 25;
}

message Transaction {
  TransactionHeader Header = 1;

  oneof SumType {
    TransOrd TransOrd = 2;
    TransStorage TransStorage = 3;
    TransTickTock TransTickTock = 4;
    TransSplitPrepare TransSplitPrepare = 5;
    TransMergePrepare TransMergePrepare = 6;
    TransMergeInstall TransMergeInstall = 7;
  }
}

message BlockMessage {
  Chain Chain = 1;
  BlockHeader Header = 2;
  repeated Transaction Transactions = 3;
}
