// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.3
// source: ton/block_message.proto

package ton_messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BlockID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workchain int32  `protobuf:"varint,1,opt,name=Workchain,proto3" json:"Workchain,omitempty"`
	Shard     uint64 `protobuf:"varint,2,opt,name=Shard,proto3" json:"Shard,omitempty"`
	Seqno     uint32 `protobuf:"varint,3,opt,name=Seqno,proto3" json:"Seqno,omitempty"`
	// base64 format
	RootHash []byte `protobuf:"bytes,4,opt,name=RootHash,proto3" json:"RootHash,omitempty"`
	FileHash []byte `protobuf:"bytes,5,opt,name=FileHash,proto3" json:"FileHash,omitempty"`
}

func (x *BlockID) Reset() {
	*x = BlockID{}
	mi := &file_ton_block_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockID) ProtoMessage() {}

func (x *BlockID) ProtoReflect() protoreflect.Message {
	mi := &file_ton_block_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockID.ProtoReflect.Descriptor instead.
func (*BlockID) Descriptor() ([]byte, []int) {
	return file_ton_block_message_proto_rawDescGZIP(), []int{0}
}

func (x *BlockID) GetWorkchain() int32 {
	if x != nil {
		return x.Workchain
	}
	return 0
}

func (x *BlockID) GetShard() uint64 {
	if x != nil {
		return x.Shard
	}
	return 0
}

func (x *BlockID) GetSeqno() uint32 {
	if x != nil {
		return x.Seqno
	}
	return 0
}

func (x *BlockID) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

func (x *BlockID) GetFileHash() []byte {
	if x != nil {
		return x.FileHash
	}
	return nil
}

type GenSoftware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version      uint32 `protobuf:"varint,1,opt,name=Version,proto3" json:"Version,omitempty"`
	Capabilities uint64 `protobuf:"varint,2,opt,name=Capabilities,proto3" json:"Capabilities,omitempty"`
}

func (x *GenSoftware) Reset() {
	*x = GenSoftware{}
	mi := &file_ton_block_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenSoftware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenSoftware) ProtoMessage() {}

func (x *GenSoftware) ProtoReflect() protoreflect.Message {
	mi := &file_ton_block_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenSoftware.ProtoReflect.Descriptor instead.
func (*GenSoftware) Descriptor() ([]byte, []int) {
	return file_ton_block_message_proto_rawDescGZIP(), []int{1}
}

func (x *GenSoftware) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GenSoftware) GetCapabilities() uint64 {
	if x != nil {
		return x.Capabilities
	}
	return 0
}

type AccountID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workchain int32  `protobuf:"varint,1,opt,name=Workchain,proto3" json:"Workchain,omitempty"`
	Address   []byte `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *AccountID) Reset() {
	*x = AccountID{}
	mi := &file_ton_block_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountID) ProtoMessage() {}

func (x *AccountID) ProtoReflect() protoreflect.Message {
	mi := &file_ton_block_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountID.ProtoReflect.Descriptor instead.
func (*AccountID) Descriptor() ([]byte, []int) {
	return file_ton_block_message_proto_rawDescGZIP(), []int{2}
}

func (x *AccountID) GetWorkchain() int32 {
	if x != nil {
		return x.Workchain
	}
	return 0
}

func (x *AccountID) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

type StateUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldHash []byte `protobuf:"bytes,1,opt,name=OldHash,proto3" json:"OldHash,omitempty"`
	NewHash []byte `protobuf:"bytes,2,opt,name=NewHash,proto3" json:"NewHash,omitempty"`
}

func (x *StateUpdate) Reset() {
	*x = StateUpdate{}
	mi := &file_ton_block_message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateUpdate) ProtoMessage() {}

func (x *StateUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_ton_block_message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateUpdate.ProtoReflect.Descriptor instead.
func (*StateUpdate) Descriptor() ([]byte, []int) {
	return file_ton_block_message_proto_rawDescGZIP(), []int{3}
}

func (x *StateUpdate) GetOldHash() []byte {
	if x != nil {
		return x.OldHash
	}
	return nil
}

func (x *StateUpdate) GetNewHash() []byte {
	if x != nil {
		return x.NewHash
	}
	return nil
}

type TransactionFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TotalFee is the original total_fee of a transaction directly from the
	// blockchain.
	TotalFee uint64 `protobuf:"varint,1,opt,name=TotalFee,proto3" json:"TotalFee,omitempty"`
	// Collected during the Action phase.
	FwdFee    uint64 `protobuf:"varint,2,opt,name=FwdFee,proto3" json:"FwdFee,omitempty"`
	ActionFee uint64 `protobuf:"varint,3,opt,name=ActionFee,proto3" json:"ActionFee,omitempty"`
	// GasFee collected during the Compute Phase.
	GasFee uint64 `protobuf:"varint,4,opt,name=GasFee,proto3" json:"GasFee,omitempty"`
	// StorageFee collected during the Storage Phase.
	StorageFee uint64 `protobuf:"varint,5,opt,name=StorageFee,proto3" json:"StorageFee,omitempty"`
}

func (x *TransactionFee) Reset() {
	*x = TransactionFee{}
	mi := &file_ton_block_message_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionFee) ProtoMessage() {}

func (x *TransactionFee) ProtoReflect() protoreflect.Message {
	mi := &file_ton_block_message_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionFee.ProtoReflect.Descriptor instead.
func (*TransactionFee) Descriptor() ([]byte, []int) {
	return file_ton_block_message_proto_rawDescGZIP(), []int{4}
}

func (x *TransactionFee) GetTotalFee() uint64 {
	if x != nil {
		return x.TotalFee
	}
	return 0
}

func (x *TransactionFee) GetFwdFee() uint64 {
	if x != nil {
		return x.FwdFee
	}
	return 0
}

func (x *TransactionFee) GetActionFee() uint64 {
	if x != nil {
		return x.ActionFee
	}
	return 0
}

func (x *TransactionFee) GetGasFee() uint64 {
	if x != nil {
		return x.GasFee
	}
	return 0
}

func (x *TransactionFee) GetStorageFee() uint64 {
	if x != nil {
		return x.StorageFee
	}
	return 0
}

type TransactionHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash                []byte          `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	LT                  uint64          `protobuf:"varint,2,opt,name=LT,proto3" json:"LT,omitempty"`
	Type                string          `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Index               uint64          `protobuf:"varint,4,opt,name=Index,proto3" json:"Index,omitempty"`
	AccountAddress      *AccountID      `protobuf:"bytes,5,opt,name=AccountAddress,proto3" json:"AccountAddress,omitempty"`
	PrevTransactionLT   uint64          `protobuf:"varint,6,opt,name=PrevTransactionLT,proto3" json:"PrevTransactionLT,omitempty"`
	PrevTransactionHash []byte          `protobuf:"bytes,7,opt,name=PrevTransactionHash,proto3" json:"PrevTransactionHash,omitempty"`
	TransactionFee      *TransactionFee `protobuf:"bytes,8,opt,name=TransactionFee,proto3" json:"TransactionFee,omitempty"`
	Utime               uint32          `protobuf:"varint,9,opt,name=Utime,proto3" json:"Utime,omitempty"`
	Aborted             bool            `protobuf:"varint,10,opt,name=Aborted,proto3" json:"Aborted,omitempty"`
	Destroyed           bool            `protobuf:"varint,11,opt,name=Destroyed,proto3" json:"Destroyed,omitempty"`
	OriginalStatus      string          `protobuf:"bytes,12,opt,name=OriginalStatus,proto3" json:"OriginalStatus,omitempty"`
	EndStatus           string          `protobuf:"bytes,13,opt,name=EndStatus,proto3" json:"EndStatus,omitempty"`
	StateUpdate         *StateUpdate    `protobuf:"bytes,14,opt,name=StateUpdate,proto3" json:"StateUpdate,omitempty"`
	// BOC of the transaction.
	SourceBoc []byte `protobuf:"bytes,15,opt,name=SourceBoc,proto3" json:"SourceBoc,omitempty"`
	Success   bool   `protobuf:"varint,16,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *TransactionHeader) Reset() {
	*x = TransactionHeader{}
	mi := &file_ton_block_message_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionHeader) ProtoMessage() {}

func (x *TransactionHeader) ProtoReflect() protoreflect.Message {
	mi := &file_ton_block_message_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionHeader.ProtoReflect.Descriptor instead.
func (*TransactionHeader) Descriptor() ([]byte, []int) {
	return file_ton_block_message_proto_rawDescGZIP(), []int{5}
}

func (x *TransactionHeader) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *TransactionHeader) GetLT() uint64 {
	if x != nil {
		return x.LT
	}
	return 0
}

func (x *TransactionHeader) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TransactionHeader) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TransactionHeader) GetAccountAddress() *AccountID {
	if x != nil {
		return x.AccountAddress
	}
	return nil
}

func (x *TransactionHeader) GetPrevTransactionLT() uint64 {
	if x != nil {
		return x.PrevTransactionLT
	}
	return 0
}

func (x *TransactionHeader) GetPrevTransactionHash() []byte {
	if x != nil {
		return x.PrevTransactionHash
	}
	return nil
}

func (x *TransactionHeader) GetTransactionFee() *TransactionFee {
	if x != nil {
		return x.TransactionFee
	}
	return nil
}

func (x *TransactionHeader) GetUtime() uint32 {
	if x != nil {
		return x.Utime
	}
	return 0
}

func (x *TransactionHeader) GetAborted() bool {
	if x != nil {
		return x.Aborted
	}
	return false
}

func (x *TransactionHeader) GetDestroyed() bool {
	if x != nil {
		return x.Destroyed
	}
	return false
}

func (x *TransactionHeader) GetOriginalStatus() string {
	if x != nil {
		return x.OriginalStatus
	}
	return ""
}

func (x *TransactionHeader) GetEndStatus() string {
	if x != nil {
		return x.EndStatus
	}
	return ""
}

func (x *TransactionHeader) GetStateUpdate() *StateUpdate {
	if x != nil {
		return x.StateUpdate
	}
	return nil
}

func (x *TransactionHeader) GetSourceBoc() []byte {
	if x != nil {
		return x.SourceBoc
	}
	return nil
}

func (x *TransactionHeader) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ComputePhase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Skipped    bool   `protobuf:"varint,1,opt,name=Skipped,proto3" json:"Skipped,omitempty"`
	SkipReason string `protobuf:"bytes,2,opt,name=SkipReason,proto3" json:"SkipReason,omitempty"`
	Success    bool   `protobuf:"varint,3,opt,name=Success,proto3" json:"Success,omitempty"`
	GasFees    uint64 `protobuf:"varint,4,opt,name=GasFees,proto3" json:"GasFees,omitempty"`
	GasUsed    uint64 `protobuf:"varint,5,opt,name=GasUsed,proto3" json:"GasUsed,omitempty"`
	GasLimit   uint64 `protobuf:"varint,6,opt,name=GasLimit,proto3" json:"GasLimit,omitempty"`
	GasCredit  uint64 `protobuf:"varint,7,opt,name=GasCredit,proto3" json:"GasCredit,omitempty"`
	VmSteps    uint32 `protobuf:"varint,8,opt,name=VmSteps,proto3" json:"VmSteps,omitempty"`
	ExitCode   int32  `protobuf:"varint,9,opt,name=ExitCode,proto3" json:"ExitCode,omitempty"`
}

func (x *ComputePhase) Reset() {
	*x = ComputePhase{}
	mi := &file_ton_block_message_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComputePhase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputePhase) ProtoMessage() {}

func (x *ComputePhase) ProtoReflect() protoreflect.Message {
	mi := &file_ton_block_message_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputePhase.ProtoReflect.Descriptor instead.
func (*ComputePhase) Descriptor() ([]byte, []int) {
	return file_ton_block_message_proto_rawDescGZIP(), []int{6}
}

func (x *ComputePhase) GetSkipped() bool {
	if x != nil {
		return x.Skipped
	}
	return false
}

func (x *ComputePhase) GetSkipReason() string {
	if x != nil {
		return x.SkipReason
	}
	return ""
}

func (x *ComputePhase) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ComputePhase) GetGasFees() uint64 {
	if x != nil {
		return x.GasFees
	}
	return 0
}

func (x *ComputePhase) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *ComputePhase) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *ComputePhase) GetGasCredit() uint64 {
	if x != nil {
		return x.GasCredit
	}
	return 0
}

func (x *ComputePhase) GetVmSteps() uint32 {
	if x != nil {
		return x.VmSteps
	}
	return 0
}

func (x *ComputePhase) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

type StoragePhase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeesCollected uint64 `protobuf:"varint,1,opt,name=FeesCollected,proto3" json:"FeesCollected,omitempty"`
	FeesDue       uint64 `protobuf:"varint,2,opt,name=FeesDue,proto3" json:"FeesDue,omitempty"`
	StatusChange  string `protobuf:"bytes,3,opt,name=StatusChange,proto3" json:"StatusChange,omitempty"`
}

func (x *StoragePhase) Reset() {
	*x = StoragePhase{}
	mi := &file_ton_block_message_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoragePhase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoragePhase) ProtoMessage() {}

func (x *StoragePhase) ProtoReflect() protoreflect.Message {
	mi := &file_ton_block_message_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoragePhase.ProtoReflect.Descriptor instead.
func (*StoragePhase) Descriptor() ([]byte, []int) {
	return file_ton_block_message_proto_rawDescGZIP(), []int{7}
}

func (x *StoragePhase) GetFeesCollected() uint64 {
	if x != nil {
		return x.FeesCollected
	}
	return 0
}

func (x *StoragePhase) GetFeesDue() uint64 {
	if x != nil {
		return x.FeesDue
	}
	return 0
}

func (x *StoragePhase) GetStatusChange() string {
	if x != nil {
		return x.StatusChange
	}
	return ""
}

type CreditPhase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DueFeesCollected uint64 `protobuf:"varint,1,opt,name=DueFeesCollected,proto3" json:"DueFeesCollected,omitempty"`
	Grams            uint64 `protobuf:"varint,2,opt,name=Grams,proto3" json:"Grams,omitempty"`
}

func (x *CreditPhase) Reset() {
	*x = CreditPhase{}
	mi := &file_ton_block_message_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreditPhase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditPhase) ProtoMessage() {}

func (x *CreditPhase) ProtoReflect() protoreflect.Message {
	mi := &file_ton_block_message_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditPhase.ProtoReflect.Descriptor instead.
func (*CreditPhase) Descriptor() ([]byte, []int) {
	return file_ton_block_message_proto_rawDescGZIP(), []int{8}
}

func (x *CreditPhase) GetDueFeesCollected() uint64 {
	if x != nil {
		return x.DueFeesCollected
	}
	return 0
}

func (x *CreditPhase) GetGrams() uint64 {
	if x != nil {
		return x.Grams
	}
	return 0
}

type ActionPhase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success          bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Valid            bool   `protobuf:"varint,2,opt,name=Valid,proto3" json:"Valid,omitempty"`
	NoFunds          bool   `protobuf:"varint,3,opt,name=NoFunds,proto3" json:"NoFunds,omitempty"`
	StatusChangeName string `protobuf:"bytes,4,opt,name=StatusChangeName,proto3" json:"StatusChangeName,omitempty"`
	TotalFwdFees     uint64 `protobuf:"varint,5,opt,name=TotalFwdFees,proto3" json:"TotalFwdFees,omitempty"`
	TotalActionFees  uint64 `protobuf:"varint,6,opt,name=TotalActionFees,proto3" json:"TotalActionFees,omitempty"`
	ResultCode       int32  `protobuf:"varint,7,opt,name=ResultCode,proto3" json:"ResultCode,omitempty"`
	ResultArg        int32  `protobuf:"varint,8,opt,name=ResultArg,proto3" json:"ResultArg,omitempty"`
	TotalActions     uint32 `protobuf:"varint,9,opt,name=TotalActions,proto3" json:"TotalActions,omitempty"`
	SpecActions      uint32 `protobuf:"varint,10,opt,name=SpecActions,proto3" json:"SpecActions,omitempty"`
	SkippedActions   uint32 `protobuf:"varint,11,opt,name=SkippedActions,proto3" json:"SkippedActions,omitempty"`
	MsgsCreated      uint32 `protobuf:"varint,12,opt,name=MsgsCreated,proto3" json:"MsgsCreated,omitempty"`
}

func (x *ActionPhase) Reset() {
	*x = ActionPhase{}
	mi := &file_ton_block_message_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionPhase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionPhase) ProtoMessage() {}

func (x *ActionPhase) ProtoReflect() protoreflect.Message {
	mi := &file_ton_block_message_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionPhase.ProtoReflect.Descriptor instead.
func (*ActionPhase) Descriptor() ([]byte, []int) {
	return file_ton_block_message_proto_rawDescGZIP(), []int{9}
}

func (x *ActionPhase) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ActionPhase) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *ActionPhase) GetNoFunds() bool {
	if x != nil {
		return x.NoFunds
	}
	return false
}

func (x *ActionPhase) GetStatusChangeName() string {
	if x != nil {
		return x.StatusChangeName
	}
	return ""
}

func (x *ActionPhase) GetTotalFwdFees() uint64 {
	if x != nil {
		return x.TotalFwdFees
	}
	return 0
}

func (x *ActionPhase) GetTotalActionFees() uint64 {
	if x != nil {
		return x.TotalActionFees
	}
	return 0
}

func (x *ActionPhase) GetResultCode() int32 {
	if x != nil {
		return x.ResultCode
	}
	return 0
}

func (x *ActionPhase) GetResultArg() int32 {
	if x != nil {
		return x.ResultArg
	}
	return 0
}

func (x *ActionPhase) GetTotalActions() uint32 {
	if x != nil {
		return x.TotalActions
	}
	return 0
}

func (x *ActionPhase) GetSpecActions() uint32 {
	if x != nil {
		return x.SpecActions
	}
	return 0
}

func (x *ActionPhase) GetSkippedActions() uint32 {
	if x != nil {
		return x.SkippedActions
	}
	return 0
}

func (x *ActionPhase) GetMsgsCreated() uint32 {
	if x != nil {
		return x.MsgsCreated
	}
	return 0
}

type BouncePhase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhaseType string `protobuf:"bytes,1,opt,name=PhaseType,proto3" json:"PhaseType,omitempty"`
}

func (x *BouncePhase) Reset() {
	*x = BouncePhase{}
	mi := &file_ton_block_message_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BouncePhase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BouncePhase) ProtoMessage() {}

func (x *BouncePhase) ProtoReflect() protoreflect.Message {
	mi := &file_ton_block_message_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BouncePhase.ProtoReflect.Descriptor instead.
func (*BouncePhase) Descriptor() ([]byte, []int) {
	return file_ton_block_message_proto_rawDescGZIP(), []int{10}
}

func (x *BouncePhase) GetPhaseType() string {
	if x != nil {
		return x.PhaseType
	}
	return ""
}

type TransactionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*TransactionType_TransOrd
	//	*TransactionType_TransStorage
	//	*TransactionType_TransTickTock
	//	*TransactionType_TransSplitPrepare
	//	*TransactionType_TransMergePrepare
	//	*TransactionType_TransMergeInstall
	Type isTransactionType_Type `protobuf_oneof:"Type"`
}

func (x *TransactionType) Reset() {
	*x = TransactionType{}
	mi := &file_ton_block_message_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionType) ProtoMessage() {}

func (x *TransactionType) ProtoReflect() protoreflect.Message {
	mi := &file_ton_block_message_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionType.ProtoReflect.Descriptor instead.
func (*TransactionType) Descriptor() ([]byte, []int) {
	return file_ton_block_message_proto_rawDescGZIP(), []int{11}
}

func (m *TransactionType) GetType() isTransactionType_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *TransactionType) GetTransOrd() *TransOrd {
	if x, ok := x.GetType().(*TransactionType_TransOrd); ok {
		return x.TransOrd
	}
	return nil
}

func (x *TransactionType) GetTransStorage() *TransStorage {
	if x, ok := x.GetType().(*TransactionType_TransStorage); ok {
		return x.TransStorage
	}
	return nil
}

func (x *TransactionType) GetTransTickTock() *TransTickTock {
	if x, ok := x.GetType().(*TransactionType_TransTickTock); ok {
		return x.TransTickTock
	}
	return nil
}

func (x *TransactionType) GetTransSplitPrepare() *TransSplitPrepare {
	if x, ok := x.GetType().(*TransactionType_TransSplitPrepare); ok {
		return x.TransSplitPrepare
	}
	return nil
}

func (x *TransactionType) GetTransMergePrepare() *TransMergePrepare {
	if x, ok := x.GetType().(*TransactionType_TransMergePrepare); ok {
		return x.TransMergePrepare
	}
	return nil
}

func (x *TransactionType) GetTransMergeInstall() *TransMergeInstall {
	if x, ok := x.GetType().(*TransactionType_TransMergeInstall); ok {
		return x.TransMergeInstall
	}
	return nil
}

type isTransactionType_Type interface {
	isTransactionType_Type()
}

type TransactionType_TransOrd struct {
	TransOrd *TransOrd `protobuf:"bytes,1,opt,name=TransOrd,proto3,oneof"`
}

type TransactionType_TransStorage struct {
	TransStorage *TransStorage `protobuf:"bytes,2,opt,name=TransStorage,proto3,oneof"`
}

type TransactionType_TransTickTock struct {
	TransTickTock *TransTickTock `protobuf:"bytes,3,opt,name=TransTickTock,proto3,oneof"`
}

type TransactionType_TransSplitPrepare struct {
	TransSplitPrepare *TransSplitPrepare `protobuf:"bytes,4,opt,name=TransSplitPrepare,proto3,oneof"`
}

type TransactionType_TransMergePrepare struct {
	TransMergePrepare *TransMergePrepare `protobuf:"bytes,5,opt,name=TransMergePrepare,proto3,oneof"`
}

type TransactionType_TransMergeInstall struct {
	TransMergeInstall *TransMergeInstall `protobuf:"bytes,6,opt,name=TransMergeInstall,proto3,oneof"`
}

func (*TransactionType_TransOrd) isTransactionType_Type() {}

func (*TransactionType_TransStorage) isTransactionType_Type() {}

func (*TransactionType_TransTickTock) isTransactionType_Type() {}

func (*TransactionType_TransSplitPrepare) isTransactionType_Type() {}

func (*TransactionType_TransMergePrepare) isTransactionType_Type() {}

func (*TransactionType_TransMergeInstall) isTransactionType_Type() {}

type TransOrd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComputePhase *ComputePhase `protobuf:"bytes,1,opt,name=ComputePhase,proto3" json:"ComputePhase,omitempty"`
	StoragePhase *StoragePhase `protobuf:"bytes,2,opt,name=StoragePhase,proto3" json:"StoragePhase,omitempty"`
	CreditPhase  *CreditPhase  `protobuf:"bytes,3,opt,name=CreditPhase,proto3" json:"CreditPhase,omitempty"`
	ActionPhase  *ActionPhase  `protobuf:"bytes,4,opt,name=ActionPhase,proto3" json:"ActionPhase,omitempty"`
	BouncePhase  *BouncePhase  `protobuf:"bytes,5,opt,name=BouncePhase,proto3" json:"BouncePhase,omitempty"`
}

func (x *TransOrd) Reset() {
	*x = TransOrd{}
	mi := &file_ton_block_message_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransOrd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransOrd) ProtoMessage() {}

func (x *TransOrd) ProtoReflect() protoreflect.Message {
	mi := &file_ton_block_message_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransOrd.ProtoReflect.Descriptor instead.
func (*TransOrd) Descriptor() ([]byte, []int) {
	return file_ton_block_message_proto_rawDescGZIP(), []int{12}
}

func (x *TransOrd) GetComputePhase() *ComputePhase {
	if x != nil {
		return x.ComputePhase
	}
	return nil
}

func (x *TransOrd) GetStoragePhase() *StoragePhase {
	if x != nil {
		return x.StoragePhase
	}
	return nil
}

func (x *TransOrd) GetCreditPhase() *CreditPhase {
	if x != nil {
		return x.CreditPhase
	}
	return nil
}

func (x *TransOrd) GetActionPhase() *ActionPhase {
	if x != nil {
		return x.ActionPhase
	}
	return nil
}

func (x *TransOrd) GetBouncePhase() *BouncePhase {
	if x != nil {
		return x.BouncePhase
	}
	return nil
}

type TransStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoragePhase *StoragePhase `protobuf:"bytes,1,opt,name=StoragePhase,proto3" json:"StoragePhase,omitempty"`
}

func (x *TransStorage) Reset() {
	*x = TransStorage{}
	mi := &file_ton_block_message_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransStorage) ProtoMessage() {}

func (x *TransStorage) ProtoReflect() protoreflect.Message {
	mi := &file_ton_block_message_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransStorage.ProtoReflect.Descriptor instead.
func (*TransStorage) Descriptor() ([]byte, []int) {
	return file_ton_block_message_proto_rawDescGZIP(), []int{13}
}

func (x *TransStorage) GetStoragePhase() *StoragePhase {
	if x != nil {
		return x.StoragePhase
	}
	return nil
}

type TransTickTock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComputePhase *ComputePhase `protobuf:"bytes,1,opt,name=ComputePhase,proto3" json:"ComputePhase,omitempty"`
	StoragePhase *StoragePhase `protobuf:"bytes,2,opt,name=StoragePhase,proto3" json:"StoragePhase,omitempty"`
	ActionPhase  *ActionPhase  `protobuf:"bytes,3,opt,name=ActionPhase,proto3" json:"ActionPhase,omitempty"`
}

func (x *TransTickTock) Reset() {
	*x = TransTickTock{}
	mi := &file_ton_block_message_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransTickTock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransTickTock) ProtoMessage() {}

func (x *TransTickTock) ProtoReflect() protoreflect.Message {
	mi := &file_ton_block_message_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransTickTock.ProtoReflect.Descriptor instead.
func (*TransTickTock) Descriptor() ([]byte, []int) {
	return file_ton_block_message_proto_rawDescGZIP(), []int{14}
}

func (x *TransTickTock) GetComputePhase() *ComputePhase {
	if x != nil {
		return x.ComputePhase
	}
	return nil
}

func (x *TransTickTock) GetStoragePhase() *StoragePhase {
	if x != nil {
		return x.StoragePhase
	}
	return nil
}

func (x *TransTickTock) GetActionPhase() *ActionPhase {
	if x != nil {
		return x.ActionPhase
	}
	return nil
}

type TransSplitPrepare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComputePhase *ComputePhase `protobuf:"bytes,1,opt,name=ComputePhase,proto3" json:"ComputePhase,omitempty"`
	StoragePhase *StoragePhase `protobuf:"bytes,2,opt,name=StoragePhase,proto3" json:"StoragePhase,omitempty"`
	ActionPhase  *ActionPhase  `protobuf:"bytes,3,opt,name=ActionPhase,proto3" json:"ActionPhase,omitempty"`
}

func (x *TransSplitPrepare) Reset() {
	*x = TransSplitPrepare{}
	mi := &file_ton_block_message_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransSplitPrepare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransSplitPrepare) ProtoMessage() {}

func (x *TransSplitPrepare) ProtoReflect() protoreflect.Message {
	mi := &file_ton_block_message_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransSplitPrepare.ProtoReflect.Descriptor instead.
func (*TransSplitPrepare) Descriptor() ([]byte, []int) {
	return file_ton_block_message_proto_rawDescGZIP(), []int{15}
}

func (x *TransSplitPrepare) GetComputePhase() *ComputePhase {
	if x != nil {
		return x.ComputePhase
	}
	return nil
}

func (x *TransSplitPrepare) GetStoragePhase() *StoragePhase {
	if x != nil {
		return x.StoragePhase
	}
	return nil
}

func (x *TransSplitPrepare) GetActionPhase() *ActionPhase {
	if x != nil {
		return x.ActionPhase
	}
	return nil
}

type TransMergePrepare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoragePhase *StoragePhase `protobuf:"bytes,1,opt,name=StoragePhase,proto3" json:"StoragePhase,omitempty"`
}

func (x *TransMergePrepare) Reset() {
	*x = TransMergePrepare{}
	mi := &file_ton_block_message_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransMergePrepare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransMergePrepare) ProtoMessage() {}

func (x *TransMergePrepare) ProtoReflect() protoreflect.Message {
	mi := &file_ton_block_message_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransMergePrepare.ProtoReflect.Descriptor instead.
func (*TransMergePrepare) Descriptor() ([]byte, []int) {
	return file_ton_block_message_proto_rawDescGZIP(), []int{16}
}

func (x *TransMergePrepare) GetStoragePhase() *StoragePhase {
	if x != nil {
		return x.StoragePhase
	}
	return nil
}

type TransMergeInstall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComputePhase *ComputePhase `protobuf:"bytes,1,opt,name=ComputePhase,proto3" json:"ComputePhase,omitempty"`
	StoragePhase *StoragePhase `protobuf:"bytes,2,opt,name=StoragePhase,proto3" json:"StoragePhase,omitempty"`
	CreditPhase  *CreditPhase  `protobuf:"bytes,3,opt,name=CreditPhase,proto3" json:"CreditPhase,omitempty"`
	ActionPhase  *ActionPhase  `protobuf:"bytes,4,opt,name=ActionPhase,proto3" json:"ActionPhase,omitempty"`
}

func (x *TransMergeInstall) Reset() {
	*x = TransMergeInstall{}
	mi := &file_ton_block_message_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransMergeInstall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransMergeInstall) ProtoMessage() {}

func (x *TransMergeInstall) ProtoReflect() protoreflect.Message {
	mi := &file_ton_block_message_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransMergeInstall.ProtoReflect.Descriptor instead.
func (*TransMergeInstall) Descriptor() ([]byte, []int) {
	return file_ton_block_message_proto_rawDescGZIP(), []int{17}
}

func (x *TransMergeInstall) GetComputePhase() *ComputePhase {
	if x != nil {
		return x.ComputePhase
	}
	return nil
}

func (x *TransMergeInstall) GetStoragePhase() *StoragePhase {
	if x != nil {
		return x.StoragePhase
	}
	return nil
}

func (x *TransMergeInstall) GetCreditPhase() *CreditPhase {
	if x != nil {
		return x.CreditPhase
	}
	return nil
}

func (x *TransMergeInstall) GetActionPhase() *ActionPhase {
	if x != nil {
		return x.ActionPhase
	}
	return nil
}

type IntMsgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedLT          uint64     `protobuf:"varint,1,opt,name=CreatedLT,proto3" json:"CreatedLT,omitempty"`
	CreatedAt          uint32     `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	SourceAddress      *AccountID `protobuf:"bytes,3,opt,name=SourceAddress,proto3" json:"SourceAddress,omitempty"`
	DestinationAddress *AccountID `protobuf:"bytes,4,opt,name=DestinationAddress,proto3" json:"DestinationAddress,omitempty"`
	IhrDisabled        bool       `protobuf:"varint,5,opt,name=IhrDisabled,proto3" json:"IhrDisabled,omitempty"`
	Bounce             bool       `protobuf:"varint,6,opt,name=Bounce,proto3" json:"Bounce,omitempty"`
	Bounced            bool       `protobuf:"varint,7,opt,name=Bounced,proto3" json:"Bounced,omitempty"`
	Value              int64      `protobuf:"varint,8,opt,name=Value,proto3" json:"Value,omitempty"`
	FwdFee             int64      `protobuf:"varint,9,opt,name=FwdFee,proto3" json:"FwdFee,omitempty"`
	IhrFee             int64      `protobuf:"varint,10,opt,name=IhrFee,proto3" json:"IhrFee,omitempty"`
	Body               []byte     `protobuf:"bytes,11,opt,name=Body,proto3" json:"Body,omitempty"`
}

func (x *IntMsgInfo) Reset() {
	*x = IntMsgInfo{}
	mi := &file_ton_block_message_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IntMsgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntMsgInfo) ProtoMessage() {}

func (x *IntMsgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ton_block_message_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntMsgInfo.ProtoReflect.Descriptor instead.
func (*IntMsgInfo) Descriptor() ([]byte, []int) {
	return file_ton_block_message_proto_rawDescGZIP(), []int{18}
}

func (x *IntMsgInfo) GetCreatedLT() uint64 {
	if x != nil {
		return x.CreatedLT
	}
	return 0
}

func (x *IntMsgInfo) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *IntMsgInfo) GetSourceAddress() *AccountID {
	if x != nil {
		return x.SourceAddress
	}
	return nil
}

func (x *IntMsgInfo) GetDestinationAddress() *AccountID {
	if x != nil {
		return x.DestinationAddress
	}
	return nil
}

func (x *IntMsgInfo) GetIhrDisabled() bool {
	if x != nil {
		return x.IhrDisabled
	}
	return false
}

func (x *IntMsgInfo) GetBounce() bool {
	if x != nil {
		return x.Bounce
	}
	return false
}

func (x *IntMsgInfo) GetBounced() bool {
	if x != nil {
		return x.Bounced
	}
	return false
}

func (x *IntMsgInfo) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *IntMsgInfo) GetFwdFee() int64 {
	if x != nil {
		return x.FwdFee
	}
	return 0
}

func (x *IntMsgInfo) GetIhrFee() int64 {
	if x != nil {
		return x.IhrFee
	}
	return 0
}

func (x *IntMsgInfo) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type ExtInMsgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationAddress *AccountID `protobuf:"bytes,1,opt,name=DestinationAddress,proto3" json:"DestinationAddress,omitempty"`
	Hash               []byte     `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	ImportFee          uint64     `protobuf:"varint,3,opt,name=ImportFee,proto3" json:"ImportFee,omitempty"`
	Body               []byte     `protobuf:"bytes,4,opt,name=Body,proto3" json:"Body,omitempty"`
}

func (x *ExtInMsgInfo) Reset() {
	*x = ExtInMsgInfo{}
	mi := &file_ton_block_message_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtInMsgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtInMsgInfo) ProtoMessage() {}

func (x *ExtInMsgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ton_block_message_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtInMsgInfo.ProtoReflect.Descriptor instead.
func (*ExtInMsgInfo) Descriptor() ([]byte, []int) {
	return file_ton_block_message_proto_rawDescGZIP(), []int{19}
}

func (x *ExtInMsgInfo) GetDestinationAddress() *AccountID {
	if x != nil {
		return x.DestinationAddress
	}
	return nil
}

func (x *ExtInMsgInfo) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *ExtInMsgInfo) GetImportFee() uint64 {
	if x != nil {
		return x.ImportFee
	}
	return 0
}

func (x *ExtInMsgInfo) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type ExtOutMsgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedLT     uint64     `protobuf:"varint,1,opt,name=CreatedLT,proto3" json:"CreatedLT,omitempty"`
	CreatedAt     uint32     `protobuf:"varint,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	SourceAddress *AccountID `protobuf:"bytes,3,opt,name=SourceAddress,proto3" json:"SourceAddress,omitempty"`
	Body          []byte     `protobuf:"bytes,4,opt,name=Body,proto3" json:"Body,omitempty"`
}

func (x *ExtOutMsgInfo) Reset() {
	*x = ExtOutMsgInfo{}
	mi := &file_ton_block_message_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtOutMsgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtOutMsgInfo) ProtoMessage() {}

func (x *ExtOutMsgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ton_block_message_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtOutMsgInfo.ProtoReflect.Descriptor instead.
func (*ExtOutMsgInfo) Descriptor() ([]byte, []int) {
	return file_ton_block_message_proto_rawDescGZIP(), []int{20}
}

func (x *ExtOutMsgInfo) GetCreatedLT() uint64 {
	if x != nil {
		return x.CreatedLT
	}
	return 0
}

func (x *ExtOutMsgInfo) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ExtOutMsgInfo) GetSourceAddress() *AccountID {
	if x != nil {
		return x.SourceAddress
	}
	return nil
}

func (x *ExtOutMsgInfo) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SumType:
	//
	//	*Message_IntMsgInfo
	//	*Message_ExtInMsgInfo
	//	*Message_ExtOutMsgInfo
	SumType isMessage_SumType `protobuf_oneof:"SumType"`
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_ton_block_message_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_ton_block_message_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_ton_block_message_proto_rawDescGZIP(), []int{21}
}

func (m *Message) GetSumType() isMessage_SumType {
	if m != nil {
		return m.SumType
	}
	return nil
}

func (x *Message) GetIntMsgInfo() *IntMsgInfo {
	if x, ok := x.GetSumType().(*Message_IntMsgInfo); ok {
		return x.IntMsgInfo
	}
	return nil
}

func (x *Message) GetExtInMsgInfo() *ExtInMsgInfo {
	if x, ok := x.GetSumType().(*Message_ExtInMsgInfo); ok {
		return x.ExtInMsgInfo
	}
	return nil
}

func (x *Message) GetExtOutMsgInfo() *ExtOutMsgInfo {
	if x, ok := x.GetSumType().(*Message_ExtOutMsgInfo); ok {
		return x.ExtOutMsgInfo
	}
	return nil
}

type isMessage_SumType interface {
	isMessage_SumType()
}

type Message_IntMsgInfo struct {
	IntMsgInfo *IntMsgInfo `protobuf:"bytes,1,opt,name=IntMsgInfo,proto3,oneof"`
}

type Message_ExtInMsgInfo struct {
	ExtInMsgInfo *ExtInMsgInfo `protobuf:"bytes,2,opt,name=ExtInMsgInfo,proto3,oneof"`
}

type Message_ExtOutMsgInfo struct {
	ExtOutMsgInfo *ExtOutMsgInfo `protobuf:"bytes,3,opt,name=ExtOutMsgInfo,proto3,oneof"`
}

func (*Message_IntMsgInfo) isMessage_SumType() {}

func (*Message_ExtInMsgInfo) isMessage_SumType() {}

func (*Message_ExtOutMsgInfo) isMessage_SumType() {}

type BlockExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RandSeed          []byte `protobuf:"bytes,1,opt,name=RandSeed,proto3" json:"RandSeed,omitempty"`
	CreatedBy         []byte `protobuf:"bytes,2,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`
	InMsgDescrLength  uint32 `protobuf:"varint,3,opt,name=InMsgDescrLength,proto3" json:"InMsgDescrLength,omitempty"`
	OutMsgDescrLength uint32 `protobuf:"varint,4,opt,name=OutMsgDescrLength,proto3" json:"OutMsgDescrLength,omitempty"`
}

func (x *BlockExtra) Reset() {
	*x = BlockExtra{}
	mi := &file_ton_block_message_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockExtra) ProtoMessage() {}

func (x *BlockExtra) ProtoReflect() protoreflect.Message {
	mi := &file_ton_block_message_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockExtra.ProtoReflect.Descriptor instead.
func (*BlockExtra) Descriptor() ([]byte, []int) {
	return file_ton_block_message_proto_rawDescGZIP(), []int{22}
}

func (x *BlockExtra) GetRandSeed() []byte {
	if x != nil {
		return x.RandSeed
	}
	return nil
}

func (x *BlockExtra) GetCreatedBy() []byte {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *BlockExtra) GetInMsgDescrLength() uint32 {
	if x != nil {
		return x.InMsgDescrLength
	}
	return 0
}

func (x *BlockExtra) GetOutMsgDescrLength() uint32 {
	if x != nil {
		return x.OutMsgDescrLength
	}
	return 0
}

type Chain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId []byte `protobuf:"bytes,1,opt,name=ChainId,proto3" json:"ChainId,omitempty"`
}

func (x *Chain) Reset() {
	*x = Chain{}
	mi := &file_ton_block_message_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Chain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chain) ProtoMessage() {}

func (x *Chain) ProtoReflect() protoreflect.Message {
	mi := &file_ton_block_message_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chain.ProtoReflect.Descriptor instead.
func (*Chain) Descriptor() ([]byte, []int) {
	return file_ton_block_message_proto_rawDescGZIP(), []int{23}
}

func (x *Chain) GetChainId() []byte {
	if x != nil {
		return x.ChainId
	}
	return nil
}

type BlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockID                   *BlockID   `protobuf:"bytes,1,opt,name=BlockID,proto3" json:"BlockID,omitempty"`
	MasterBlock               *BlockID   `protobuf:"bytes,2,opt,name=MasterBlock,proto3" json:"MasterBlock,omitempty"`
	PrevBlocks                []*BlockID `protobuf:"bytes,3,rep,name=PrevBlocks,proto3" json:"PrevBlocks,omitempty"`
	StartLt                   uint64     `protobuf:"varint,4,opt,name=StartLt,proto3" json:"StartLt,omitempty"`
	EndLt                     uint64     `protobuf:"varint,5,opt,name=EndLt,proto3" json:"EndLt,omitempty"`
	MasterChain               bool       `protobuf:"varint,6,opt,name=MasterChain,proto3" json:"MasterChain,omitempty"`
	GenUtime                  uint32     `protobuf:"varint,7,opt,name=GenUtime,proto3" json:"GenUtime,omitempty"`
	GlobalID                  int32      `protobuf:"varint,8,opt,name=GlobalID,proto3" json:"GlobalID,omitempty"`
	Version                   uint32     `protobuf:"varint,9,opt,name=Version,proto3" json:"Version,omitempty"`
	Flag                      int32      `protobuf:"varint,10,opt,name=Flag,proto3" json:"Flag,omitempty"`
	AfterMerge                bool       `protobuf:"varint,11,opt,name=AfterMerge,proto3" json:"AfterMerge,omitempty"`
	AfterSplit                bool       `protobuf:"varint,12,opt,name=AfterSplit,proto3" json:"AfterSplit,omitempty"`
	BeforeSplit               bool       `protobuf:"varint,13,opt,name=BeforeSplit,proto3" json:"BeforeSplit,omitempty"`
	WantMerge                 bool       `protobuf:"varint,14,opt,name=WantMerge,proto3" json:"WantMerge,omitempty"`
	WantSplit                 bool       `protobuf:"varint,15,opt,name=WantSplit,proto3" json:"WantSplit,omitempty"`
	GenValidatorListHashShort uint32     `protobuf:"varint,16,opt,name=GenValidatorListHashShort,proto3" json:"GenValidatorListHashShort,omitempty"`
	GenCatchainSeqno          uint32     `protobuf:"varint,17,opt,name=GenCatchainSeqno,proto3" json:"GenCatchainSeqno,omitempty"`
	MinRefMcSeqno             uint32     `protobuf:"varint,18,opt,name=MinRefMcSeqno,proto3" json:"MinRefMcSeqno,omitempty"`
	KeyBlock                  bool       `protobuf:"varint,19,opt,name=KeyBlock,proto3" json:"KeyBlock,omitempty"`
	PrevKeyBlockSeqno         uint32     `protobuf:"varint,20,opt,name=PrevKeyBlockSeqno,proto3" json:"PrevKeyBlockSeqno,omitempty"`
	VertSeqno                 uint32     `protobuf:"varint,21,opt,name=VertSeqno,proto3" json:"VertSeqno,omitempty"`
	TransactionsCount         int64      `protobuf:"varint,22,opt,name=TransactionsCount,proto3" json:"TransactionsCount,omitempty"`
	// GenSoftware describes software that created this particular block.
	// It is up to the software to include this piece of information.
	GenSoftware *GenSoftware `protobuf:"bytes,23,opt,name=GenSoftware,proto3" json:"GenSoftware,omitempty"`
	// ValueFlow   ValueFlow = 24;
	BlockExtra *BlockExtra `protobuf:"bytes,25,opt,name=BlockExtra,proto3" json:"BlockExtra,omitempty"`
}

func (x *BlockHeader) Reset() {
	*x = BlockHeader{}
	mi := &file_ton_block_message_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeader) ProtoMessage() {}

func (x *BlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_ton_block_message_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeader.ProtoReflect.Descriptor instead.
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return file_ton_block_message_proto_rawDescGZIP(), []int{24}
}

func (x *BlockHeader) GetBlockID() *BlockID {
	if x != nil {
		return x.BlockID
	}
	return nil
}

func (x *BlockHeader) GetMasterBlock() *BlockID {
	if x != nil {
		return x.MasterBlock
	}
	return nil
}

func (x *BlockHeader) GetPrevBlocks() []*BlockID {
	if x != nil {
		return x.PrevBlocks
	}
	return nil
}

func (x *BlockHeader) GetStartLt() uint64 {
	if x != nil {
		return x.StartLt
	}
	return 0
}

func (x *BlockHeader) GetEndLt() uint64 {
	if x != nil {
		return x.EndLt
	}
	return 0
}

func (x *BlockHeader) GetMasterChain() bool {
	if x != nil {
		return x.MasterChain
	}
	return false
}

func (x *BlockHeader) GetGenUtime() uint32 {
	if x != nil {
		return x.GenUtime
	}
	return 0
}

func (x *BlockHeader) GetGlobalID() int32 {
	if x != nil {
		return x.GlobalID
	}
	return 0
}

func (x *BlockHeader) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BlockHeader) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *BlockHeader) GetAfterMerge() bool {
	if x != nil {
		return x.AfterMerge
	}
	return false
}

func (x *BlockHeader) GetAfterSplit() bool {
	if x != nil {
		return x.AfterSplit
	}
	return false
}

func (x *BlockHeader) GetBeforeSplit() bool {
	if x != nil {
		return x.BeforeSplit
	}
	return false
}

func (x *BlockHeader) GetWantMerge() bool {
	if x != nil {
		return x.WantMerge
	}
	return false
}

func (x *BlockHeader) GetWantSplit() bool {
	if x != nil {
		return x.WantSplit
	}
	return false
}

func (x *BlockHeader) GetGenValidatorListHashShort() uint32 {
	if x != nil {
		return x.GenValidatorListHashShort
	}
	return 0
}

func (x *BlockHeader) GetGenCatchainSeqno() uint32 {
	if x != nil {
		return x.GenCatchainSeqno
	}
	return 0
}

func (x *BlockHeader) GetMinRefMcSeqno() uint32 {
	if x != nil {
		return x.MinRefMcSeqno
	}
	return 0
}

func (x *BlockHeader) GetKeyBlock() bool {
	if x != nil {
		return x.KeyBlock
	}
	return false
}

func (x *BlockHeader) GetPrevKeyBlockSeqno() uint32 {
	if x != nil {
		return x.PrevKeyBlockSeqno
	}
	return 0
}

func (x *BlockHeader) GetVertSeqno() uint32 {
	if x != nil {
		return x.VertSeqno
	}
	return 0
}

func (x *BlockHeader) GetTransactionsCount() int64 {
	if x != nil {
		return x.TransactionsCount
	}
	return 0
}

func (x *BlockHeader) GetGenSoftware() *GenSoftware {
	if x != nil {
		return x.GenSoftware
	}
	return nil
}

func (x *BlockHeader) GetBlockExtra() *BlockExtra {
	if x != nil {
		return x.BlockExtra
	}
	return nil
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header          *TransactionHeader `protobuf:"bytes,1,opt,name=Header,proto3" json:"Header,omitempty"`
	TransactionType *TransactionType   `protobuf:"bytes,2,opt,name=TransactionType,proto3" json:"TransactionType,omitempty"`
	InMessage       *Message           `protobuf:"bytes,3,opt,name=InMessage,proto3,oneof" json:"InMessage,omitempty"`
	OutMessages     []*Message         `protobuf:"bytes,4,rep,name=OutMessages,proto3" json:"OutMessages,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	mi := &file_ton_block_message_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_ton_block_message_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_ton_block_message_proto_rawDescGZIP(), []int{25}
}

func (x *Transaction) GetHeader() *TransactionHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Transaction) GetTransactionType() *TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return nil
}

func (x *Transaction) GetInMessage() *Message {
	if x != nil {
		return x.InMessage
	}
	return nil
}

func (x *Transaction) GetOutMessages() []*Message {
	if x != nil {
		return x.OutMessages
	}
	return nil
}

type BlockMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain        *Chain         `protobuf:"bytes,1,opt,name=Chain,proto3" json:"Chain,omitempty"`
	Header       *BlockHeader   `protobuf:"bytes,2,opt,name=Header,proto3" json:"Header,omitempty"`
	Transactions []*Transaction `protobuf:"bytes,3,rep,name=Transactions,proto3" json:"Transactions,omitempty"`
}

func (x *BlockMessage) Reset() {
	*x = BlockMessage{}
	mi := &file_ton_block_message_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockMessage) ProtoMessage() {}

func (x *BlockMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ton_block_message_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockMessage.ProtoReflect.Descriptor instead.
func (*BlockMessage) Descriptor() ([]byte, []int) {
	return file_ton_block_message_proto_rawDescGZIP(), []int{26}
}

func (x *BlockMessage) GetChain() *Chain {
	if x != nil {
		return x.Chain
	}
	return nil
}

func (x *BlockMessage) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BlockMessage) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

var File_ton_block_message_proto protoreflect.FileDescriptor

var file_ton_block_message_proto_rawDesc = []byte{
	0x0a, 0x17, 0x74, 0x6f, 0x6e, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x74, 0x6f, 0x6e, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x65, 0x71, 0x6e, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x65, 0x71, 0x6e, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0x4b, 0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x53, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x22, 0x43, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x41, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x6c, 0x64, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x4f, 0x6c, 0x64, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x77, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x4e, 0x65, 0x77, 0x48, 0x61, 0x73, 0x68, 0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x77, 0x64,
	0x46, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x46, 0x77, 0x64, 0x46, 0x65,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x47, 0x61, 0x73, 0x46, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x47, 0x61, 0x73, 0x46, 0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x46, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x46, 0x65, 0x65, 0x22, 0xd1, 0x04, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x0e, 0x0a, 0x02, 0x4c, 0x54, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x4c,
	0x54, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3f, 0x0a, 0x0e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x0e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x50, 0x72, 0x65, 0x76, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x54, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x50, 0x72, 0x65, 0x76, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x54, 0x12, 0x30, 0x0a, 0x13, 0x50, 0x72,
	0x65, 0x76, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x50, 0x72, 0x65, 0x76, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x44, 0x0a, 0x0e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x65, 0x65, 0x52, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x55, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x55, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x62, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x41, 0x62, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x63,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f,
	0x63, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x86, 0x02, 0x0a, 0x0c,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53,
	0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6b, 0x69, 0x70, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x6b, 0x69, 0x70,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x47, 0x61, 0x73, 0x46, 0x65, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x47, 0x61, 0x73, 0x46, 0x65, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x61,
	0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x47, 0x61, 0x73,
	0x55, 0x73, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x47, 0x61, 0x73, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x47, 0x61, 0x73, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x56, 0x6d, 0x53, 0x74, 0x65, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x56, 0x6d, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x69, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x45, 0x78, 0x69, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x72, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x65, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x46, 0x65, 0x65,
	0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x65,
	0x65, 0x73, 0x44, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x46, 0x65, 0x65,
	0x73, 0x44, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x4f, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x75, 0x65, 0x46, 0x65,
	0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x44, 0x75, 0x65, 0x46, 0x65, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x47, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x9f, 0x03, 0x0a, 0x0b, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x6f, 0x46,
	0x75, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x4e, 0x6f, 0x46, 0x75,
	0x6e, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x77, 0x64, 0x46, 0x65, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x77, 0x64, 0x46,
	0x65, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x65, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x72, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x72, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x53, 0x70, 0x65, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x53, 0x70, 0x65, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x53, 0x6b, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x73, 0x67,
	0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x4d, 0x73, 0x67, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x2b, 0x0a, 0x0b, 0x42,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc9, 0x03, 0x0a, 0x0f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x08,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x4f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x4f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4f,
	0x72, 0x64, 0x12, 0x40, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x69, 0x63,
	0x6b, 0x54, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x54, 0x69, 0x63, 0x6b, 0x54, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x54, 0x69, 0x63, 0x6b, 0x54, 0x6f, 0x63, 0x6b, 0x12, 0x4f, 0x0a, 0x11, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xc1, 0x02, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4f, 0x72,
	0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x0b,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x42,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x0b, 0x42, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x22, 0x4e, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x0c, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x54, 0x69, 0x63, 0x6b, 0x54, 0x6f, 0x63, 0x6b, 0x12, 0x3e, 0x0a, 0x0c, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x0c, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x0c, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x0b, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x3e, 0x0a,
	0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52,
	0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x3e, 0x0a,
	0x0c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52,
	0x0c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x0b, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x22, 0x53, 0x0a, 0x11, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12,
	0x3e, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x22,
	0x8d, 0x02, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x3e, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x6e,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x22,
	0xfe, 0x02, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x54, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x54, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x0d, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x0d, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x12, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x12,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x68, 0x72, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x68, 0x72, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x42,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x46, 0x77, 0x64, 0x46, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x46, 0x77,
	0x64, 0x46, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x68, 0x72, 0x46, 0x65, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x49, 0x68, 0x72, 0x46, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x42, 0x6f, 0x64, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x42, 0x6f, 0x64, 0x79,
	0x22, 0x9d, 0x01, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x47, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x12, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x42, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x42, 0x6f, 0x64, 0x79,
	0x22, 0x9e, 0x01, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x4f, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x54, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x54,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d,
	0x0a, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x0d,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x42, 0x6f, 0x64,
	0x79, 0x22, 0xd7, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a,
	0x0a, 0x49, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x49,
	0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0c, 0x45, 0x78, 0x74,
	0x49, 0x6e, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x49, 0x6e, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x45,
	0x78, 0x74, 0x49, 0x6e, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x0d, 0x45,
	0x78, 0x74, 0x4f, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x4f, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x0d, 0x45, 0x78, 0x74, 0x4f, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x09, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x0a,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x61,
	0x6e, 0x64, 0x53, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52, 0x61,
	0x6e, 0x64, 0x53, 0x65, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x6e, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x49, 0x6e, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x4f, 0x75, 0x74,
	0x4d, 0x73, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x21,
	0x0a, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x22, 0xa1, 0x07, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x2f, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x52, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x44, 0x12, 0x37, 0x0a, 0x0b, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x52, 0x0b,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x35, 0x0a, 0x0a, 0x50,
	0x72, 0x65, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x52, 0x0a, 0x50, 0x72, 0x65, 0x76, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x6e, 0x64, 0x4c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x45, 0x6e, 0x64,
	0x4c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x65, 0x6e, 0x55, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x47, 0x65, 0x6e, 0x55, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x57, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x57, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x61,
	0x6e, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x57,
	0x61, 0x6e, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x47, 0x65, 0x6e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x47, 0x65, 0x6e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x43, 0x61, 0x74,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x71, 0x6e, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x47, 0x65, 0x6e, 0x43, 0x61, 0x74, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x71,
	0x6e, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x69, 0x6e, 0x52, 0x65, 0x66, 0x4d, 0x63, 0x53, 0x65,
	0x71, 0x6e, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x4d, 0x69, 0x6e, 0x52, 0x65,
	0x66, 0x4d, 0x63, 0x53, 0x65, 0x71, 0x6e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x76, 0x4b, 0x65, 0x79, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x71, 0x6e, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x50, 0x72, 0x65, 0x76, 0x4b, 0x65, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x71,
	0x6e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x65, 0x72, 0x74, 0x53, 0x65, 0x71, 0x6e, 0x6f, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x56, 0x65, 0x72, 0x74, 0x53, 0x65, 0x71, 0x6e, 0x6f,
	0x12, 0x2c, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b,
	0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x52, 0x0b,
	0x47, 0x65, 0x6e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x22, 0x90, 0x02, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x47,
	0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x49, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6f, 0x6e,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x49, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x37, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x4f,
	0x75, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x49,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x0c, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x05, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ton_block_message_proto_rawDescOnce sync.Once
	file_ton_block_message_proto_rawDescData = file_ton_block_message_proto_rawDesc
)

func file_ton_block_message_proto_rawDescGZIP() []byte {
	file_ton_block_message_proto_rawDescOnce.Do(func() {
		file_ton_block_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_ton_block_message_proto_rawDescData)
	})
	return file_ton_block_message_proto_rawDescData
}

var file_ton_block_message_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_ton_block_message_proto_goTypes = []any{
	(*BlockID)(nil),           // 0: ton_messages.BlockID
	(*GenSoftware)(nil),       // 1: ton_messages.GenSoftware
	(*AccountID)(nil),         // 2: ton_messages.AccountID
	(*StateUpdate)(nil),       // 3: ton_messages.StateUpdate
	(*TransactionFee)(nil),    // 4: ton_messages.TransactionFee
	(*TransactionHeader)(nil), // 5: ton_messages.TransactionHeader
	(*ComputePhase)(nil),      // 6: ton_messages.ComputePhase
	(*StoragePhase)(nil),      // 7: ton_messages.StoragePhase
	(*CreditPhase)(nil),       // 8: ton_messages.CreditPhase
	(*ActionPhase)(nil),       // 9: ton_messages.ActionPhase
	(*BouncePhase)(nil),       // 10: ton_messages.BouncePhase
	(*TransactionType)(nil),   // 11: ton_messages.TransactionType
	(*TransOrd)(nil),          // 12: ton_messages.TransOrd
	(*TransStorage)(nil),      // 13: ton_messages.TransStorage
	(*TransTickTock)(nil),     // 14: ton_messages.TransTickTock
	(*TransSplitPrepare)(nil), // 15: ton_messages.TransSplitPrepare
	(*TransMergePrepare)(nil), // 16: ton_messages.TransMergePrepare
	(*TransMergeInstall)(nil), // 17: ton_messages.TransMergeInstall
	(*IntMsgInfo)(nil),        // 18: ton_messages.IntMsgInfo
	(*ExtInMsgInfo)(nil),      // 19: ton_messages.ExtInMsgInfo
	(*ExtOutMsgInfo)(nil),     // 20: ton_messages.ExtOutMsgInfo
	(*Message)(nil),           // 21: ton_messages.Message
	(*BlockExtra)(nil),        // 22: ton_messages.BlockExtra
	(*Chain)(nil),             // 23: ton_messages.Chain
	(*BlockHeader)(nil),       // 24: ton_messages.BlockHeader
	(*Transaction)(nil),       // 25: ton_messages.Transaction
	(*BlockMessage)(nil),      // 26: ton_messages.BlockMessage
}
var file_ton_block_message_proto_depIdxs = []int32{
	2,  // 0: ton_messages.TransactionHeader.AccountAddress:type_name -> ton_messages.AccountID
	4,  // 1: ton_messages.TransactionHeader.TransactionFee:type_name -> ton_messages.TransactionFee
	3,  // 2: ton_messages.TransactionHeader.StateUpdate:type_name -> ton_messages.StateUpdate
	12, // 3: ton_messages.TransactionType.TransOrd:type_name -> ton_messages.TransOrd
	13, // 4: ton_messages.TransactionType.TransStorage:type_name -> ton_messages.TransStorage
	14, // 5: ton_messages.TransactionType.TransTickTock:type_name -> ton_messages.TransTickTock
	15, // 6: ton_messages.TransactionType.TransSplitPrepare:type_name -> ton_messages.TransSplitPrepare
	16, // 7: ton_messages.TransactionType.TransMergePrepare:type_name -> ton_messages.TransMergePrepare
	17, // 8: ton_messages.TransactionType.TransMergeInstall:type_name -> ton_messages.TransMergeInstall
	6,  // 9: ton_messages.TransOrd.ComputePhase:type_name -> ton_messages.ComputePhase
	7,  // 10: ton_messages.TransOrd.StoragePhase:type_name -> ton_messages.StoragePhase
	8,  // 11: ton_messages.TransOrd.CreditPhase:type_name -> ton_messages.CreditPhase
	9,  // 12: ton_messages.TransOrd.ActionPhase:type_name -> ton_messages.ActionPhase
	10, // 13: ton_messages.TransOrd.BouncePhase:type_name -> ton_messages.BouncePhase
	7,  // 14: ton_messages.TransStorage.StoragePhase:type_name -> ton_messages.StoragePhase
	6,  // 15: ton_messages.TransTickTock.ComputePhase:type_name -> ton_messages.ComputePhase
	7,  // 16: ton_messages.TransTickTock.StoragePhase:type_name -> ton_messages.StoragePhase
	9,  // 17: ton_messages.TransTickTock.ActionPhase:type_name -> ton_messages.ActionPhase
	6,  // 18: ton_messages.TransSplitPrepare.ComputePhase:type_name -> ton_messages.ComputePhase
	7,  // 19: ton_messages.TransSplitPrepare.StoragePhase:type_name -> ton_messages.StoragePhase
	9,  // 20: ton_messages.TransSplitPrepare.ActionPhase:type_name -> ton_messages.ActionPhase
	7,  // 21: ton_messages.TransMergePrepare.StoragePhase:type_name -> ton_messages.StoragePhase
	6,  // 22: ton_messages.TransMergeInstall.ComputePhase:type_name -> ton_messages.ComputePhase
	7,  // 23: ton_messages.TransMergeInstall.StoragePhase:type_name -> ton_messages.StoragePhase
	8,  // 24: ton_messages.TransMergeInstall.CreditPhase:type_name -> ton_messages.CreditPhase
	9,  // 25: ton_messages.TransMergeInstall.ActionPhase:type_name -> ton_messages.ActionPhase
	2,  // 26: ton_messages.IntMsgInfo.SourceAddress:type_name -> ton_messages.AccountID
	2,  // 27: ton_messages.IntMsgInfo.DestinationAddress:type_name -> ton_messages.AccountID
	2,  // 28: ton_messages.ExtInMsgInfo.DestinationAddress:type_name -> ton_messages.AccountID
	2,  // 29: ton_messages.ExtOutMsgInfo.SourceAddress:type_name -> ton_messages.AccountID
	18, // 30: ton_messages.Message.IntMsgInfo:type_name -> ton_messages.IntMsgInfo
	19, // 31: ton_messages.Message.ExtInMsgInfo:type_name -> ton_messages.ExtInMsgInfo
	20, // 32: ton_messages.Message.ExtOutMsgInfo:type_name -> ton_messages.ExtOutMsgInfo
	0,  // 33: ton_messages.BlockHeader.BlockID:type_name -> ton_messages.BlockID
	0,  // 34: ton_messages.BlockHeader.MasterBlock:type_name -> ton_messages.BlockID
	0,  // 35: ton_messages.BlockHeader.PrevBlocks:type_name -> ton_messages.BlockID
	1,  // 36: ton_messages.BlockHeader.GenSoftware:type_name -> ton_messages.GenSoftware
	22, // 37: ton_messages.BlockHeader.BlockExtra:type_name -> ton_messages.BlockExtra
	5,  // 38: ton_messages.Transaction.Header:type_name -> ton_messages.TransactionHeader
	11, // 39: ton_messages.Transaction.TransactionType:type_name -> ton_messages.TransactionType
	21, // 40: ton_messages.Transaction.InMessage:type_name -> ton_messages.Message
	21, // 41: ton_messages.Transaction.OutMessages:type_name -> ton_messages.Message
	23, // 42: ton_messages.BlockMessage.Chain:type_name -> ton_messages.Chain
	24, // 43: ton_messages.BlockMessage.Header:type_name -> ton_messages.BlockHeader
	25, // 44: ton_messages.BlockMessage.Transactions:type_name -> ton_messages.Transaction
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_ton_block_message_proto_init() }
func file_ton_block_message_proto_init() {
	if File_ton_block_message_proto != nil {
		return
	}
	file_ton_block_message_proto_msgTypes[11].OneofWrappers = []any{
		(*TransactionType_TransOrd)(nil),
		(*TransactionType_TransStorage)(nil),
		(*TransactionType_TransTickTock)(nil),
		(*TransactionType_TransSplitPrepare)(nil),
		(*TransactionType_TransMergePrepare)(nil),
		(*TransactionType_TransMergeInstall)(nil),
	}
	file_ton_block_message_proto_msgTypes[21].OneofWrappers = []any{
		(*Message_IntMsgInfo)(nil),
		(*Message_ExtInMsgInfo)(nil),
		(*Message_ExtOutMsgInfo)(nil),
	}
	file_ton_block_message_proto_msgTypes[25].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ton_block_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ton_block_message_proto_goTypes,
		DependencyIndexes: file_ton_block_message_proto_depIdxs,
		MessageInfos:      file_ton_block_message_proto_msgTypes,
	}.Build()
	File_ton_block_message_proto = out.File
	file_ton_block_message_proto_rawDesc = nil
	file_ton_block_message_proto_goTypes = nil
	file_ton_block_message_proto_depIdxs = nil
}
