// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.3
// source: ton/dex_block_message.proto

package ton_messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DexInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SmartContract   *AccountID   `protobuf:"bytes,1,opt,name=SmartContract,proto3" json:"SmartContract,omitempty"`
	FeeRecipient    *AccountID   `protobuf:"bytes,2,opt,name=FeeRecipient,proto3" json:"FeeRecipient,omitempty"`
	ProtocolName    string       `protobuf:"bytes,3,opt,name=ProtocolName,proto3" json:"ProtocolName,omitempty"`
	ProtocolFamily  string       `protobuf:"bytes,4,opt,name=ProtocolFamily,proto3" json:"ProtocolFamily,omitempty"`
	ProtocolVersion string       `protobuf:"bytes,5,opt,name=ProtocolVersion,proto3" json:"ProtocolVersion,omitempty"`
	Currencies      []*TokenInfo `protobuf:"bytes,6,rep,name=Currencies,proto3" json:"Currencies,omitempty"`
}

func (x *DexInfo) Reset() {
	*x = DexInfo{}
	mi := &file_ton_dex_block_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DexInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DexInfo) ProtoMessage() {}

func (x *DexInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ton_dex_block_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DexInfo.ProtoReflect.Descriptor instead.
func (*DexInfo) Descriptor() ([]byte, []int) {
	return file_ton_dex_block_message_proto_rawDescGZIP(), []int{0}
}

func (x *DexInfo) GetSmartContract() *AccountID {
	if x != nil {
		return x.SmartContract
	}
	return nil
}

func (x *DexInfo) GetFeeRecipient() *AccountID {
	if x != nil {
		return x.FeeRecipient
	}
	return nil
}

func (x *DexInfo) GetProtocolName() string {
	if x != nil {
		return x.ProtocolName
	}
	return ""
}

func (x *DexInfo) GetProtocolFamily() string {
	if x != nil {
		return x.ProtocolFamily
	}
	return ""
}

func (x *DexInfo) GetProtocolVersion() string {
	if x != nil {
		return x.ProtocolVersion
	}
	return ""
}

func (x *DexInfo) GetCurrencies() []*TokenInfo {
	if x != nil {
		return x.Currencies
	}
	return nil
}

type TradeAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency *TokenInfo `protobuf:"bytes,1,opt,name=Currency,proto3" json:"Currency,omitempty"`
	Amount   []byte     `protobuf:"bytes,2,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Id       []byte     `protobuf:"bytes,3,opt,name=Id,proto3" json:"Id,omitempty"`
	URI      string     `protobuf:"bytes,4,opt,name=URI,proto3" json:"URI,omitempty"`
	Data     []byte     `protobuf:"bytes,5,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *TradeAsset) Reset() {
	*x = TradeAsset{}
	mi := &file_ton_dex_block_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeAsset) ProtoMessage() {}

func (x *TradeAsset) ProtoReflect() protoreflect.Message {
	mi := &file_ton_dex_block_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeAsset.ProtoReflect.Descriptor instead.
func (*TradeAsset) Descriptor() ([]byte, []int) {
	return file_ton_dex_block_message_proto_rawDescGZIP(), []int{1}
}

func (x *TradeAsset) GetCurrency() *TokenInfo {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *TradeAsset) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *TradeAsset) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TradeAsset) GetURI() string {
	if x != nil {
		return x.URI
	}
	return ""
}

func (x *TradeAsset) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type TradeSide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seller *AccountID    `protobuf:"bytes,1,opt,name=Seller,proto3" json:"Seller,omitempty"`
	Buyer  *AccountID    `protobuf:"bytes,2,opt,name=Buyer,proto3" json:"Buyer,omitempty"`
	Assets []*TradeAsset `protobuf:"bytes,3,rep,name=Assets,proto3" json:"Assets,omitempty"`
}

func (x *TradeSide) Reset() {
	*x = TradeSide{}
	mi := &file_ton_dex_block_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeSide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeSide) ProtoMessage() {}

func (x *TradeSide) ProtoReflect() protoreflect.Message {
	mi := &file_ton_dex_block_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeSide.ProtoReflect.Descriptor instead.
func (*TradeSide) Descriptor() ([]byte, []int) {
	return file_ton_dex_block_message_proto_rawDescGZIP(), []int{2}
}

func (x *TradeSide) GetSeller() *AccountID {
	if x != nil {
		return x.Seller
	}
	return nil
}

func (x *TradeSide) GetBuyer() *AccountID {
	if x != nil {
		return x.Buyer
	}
	return nil
}

func (x *TradeSide) GetAssets() []*TradeAsset {
	if x != nil {
		return x.Assets
	}
	return nil
}

type TradeFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency  *TokenInfo `protobuf:"bytes,1,opt,name=Currency,proto3" json:"Currency,omitempty"`
	Amount    []byte     `protobuf:"bytes,2,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Id        []byte     `protobuf:"bytes,3,opt,name=Id,proto3" json:"Id,omitempty"`
	Payer     *AccountID `protobuf:"bytes,4,opt,name=Payer,proto3" json:"Payer,omitempty"`
	Recipient *AccountID `protobuf:"bytes,5,opt,name=Recipient,proto3" json:"Recipient,omitempty"`
}

func (x *TradeFee) Reset() {
	*x = TradeFee{}
	mi := &file_ton_dex_block_message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeFee) ProtoMessage() {}

func (x *TradeFee) ProtoReflect() protoreflect.Message {
	mi := &file_ton_dex_block_message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeFee.ProtoReflect.Descriptor instead.
func (*TradeFee) Descriptor() ([]byte, []int) {
	return file_ton_dex_block_message_proto_rawDescGZIP(), []int{3}
}

func (x *TradeFee) GetCurrency() *TokenInfo {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *TradeFee) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *TradeFee) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TradeFee) GetPayer() *AccountID {
	if x != nil {
		return x.Payer
	}
	return nil
}

func (x *TradeFee) GetRecipient() *AccountID {
	if x != nil {
		return x.Recipient
	}
	return nil
}

type DexTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeader            *BlockHeader       `protobuf:"bytes,1,opt,name=BlockHeader,proto3" json:"BlockHeader,omitempty"`
	ParsedTransaction      *ParsedTransaction `protobuf:"bytes,2,opt,name=ParsedTransaction,proto3" json:"ParsedTransaction,omitempty"`
	TradeBlockHeader       *BlockHeader       `protobuf:"bytes,3,opt,name=TradeBlockHeader,proto3" json:"TradeBlockHeader,omitempty"`
	TradeParsedTransaction *ParsedTransaction `protobuf:"bytes,4,opt,name=TradeParsedTransaction,proto3" json:"TradeParsedTransaction,omitempty"`
	InMessage              *ParsedMessage     `protobuf:"bytes,5,opt,name=InMessage,proto3,oneof" json:"InMessage,omitempty"`
	TradeInMessage         *ParsedMessage     `protobuf:"bytes,6,opt,name=TradeInMessage,proto3,oneof" json:"TradeInMessage,omitempty"`
	Dex                    *DexInfo           `protobuf:"bytes,7,opt,name=Dex,proto3" json:"Dex,omitempty"`
	Buy                    *TradeSide         `protobuf:"bytes,8,opt,name=Buy,proto3" json:"Buy,omitempty"`
	Sell                   *TradeSide         `protobuf:"bytes,9,opt,name=Sell,proto3" json:"Sell,omitempty"`
	Sender                 *AccountID         `protobuf:"bytes,10,opt,name=Sender,proto3" json:"Sender,omitempty"`
	Success                bool               `protobuf:"varint,11,opt,name=Success,proto3" json:"Success,omitempty"`
	Fees                   []*TradeFee        `protobuf:"bytes,12,rep,name=Fees,proto3" json:"Fees,omitempty"`
}

func (x *DexTrade) Reset() {
	*x = DexTrade{}
	mi := &file_ton_dex_block_message_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DexTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DexTrade) ProtoMessage() {}

func (x *DexTrade) ProtoReflect() protoreflect.Message {
	mi := &file_ton_dex_block_message_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DexTrade.ProtoReflect.Descriptor instead.
func (*DexTrade) Descriptor() ([]byte, []int) {
	return file_ton_dex_block_message_proto_rawDescGZIP(), []int{4}
}

func (x *DexTrade) GetBlockHeader() *BlockHeader {
	if x != nil {
		return x.BlockHeader
	}
	return nil
}

func (x *DexTrade) GetParsedTransaction() *ParsedTransaction {
	if x != nil {
		return x.ParsedTransaction
	}
	return nil
}

func (x *DexTrade) GetTradeBlockHeader() *BlockHeader {
	if x != nil {
		return x.TradeBlockHeader
	}
	return nil
}

func (x *DexTrade) GetTradeParsedTransaction() *ParsedTransaction {
	if x != nil {
		return x.TradeParsedTransaction
	}
	return nil
}

func (x *DexTrade) GetInMessage() *ParsedMessage {
	if x != nil {
		return x.InMessage
	}
	return nil
}

func (x *DexTrade) GetTradeInMessage() *ParsedMessage {
	if x != nil {
		return x.TradeInMessage
	}
	return nil
}

func (x *DexTrade) GetDex() *DexInfo {
	if x != nil {
		return x.Dex
	}
	return nil
}

func (x *DexTrade) GetBuy() *TradeSide {
	if x != nil {
		return x.Buy
	}
	return nil
}

func (x *DexTrade) GetSell() *TradeSide {
	if x != nil {
		return x.Sell
	}
	return nil
}

func (x *DexTrade) GetSender() *AccountID {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *DexTrade) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DexTrade) GetFees() []*TradeFee {
	if x != nil {
		return x.Fees
	}
	return nil
}

type DexBlockMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain  *Chain      `protobuf:"bytes,1,opt,name=Chain,proto3" json:"Chain,omitempty"`
	Trades []*DexTrade `protobuf:"bytes,2,rep,name=Trades,proto3" json:"Trades,omitempty"`
}

func (x *DexBlockMessage) Reset() {
	*x = DexBlockMessage{}
	mi := &file_ton_dex_block_message_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DexBlockMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DexBlockMessage) ProtoMessage() {}

func (x *DexBlockMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ton_dex_block_message_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DexBlockMessage.ProtoReflect.Descriptor instead.
func (*DexBlockMessage) Descriptor() ([]byte, []int) {
	return file_ton_dex_block_message_proto_rawDescGZIP(), []int{5}
}

func (x *DexBlockMessage) GetChain() *Chain {
	if x != nil {
		return x.Chain
	}
	return nil
}

func (x *DexBlockMessage) GetTrades() []*DexTrade {
	if x != nil {
		return x.Trades
	}
	return nil
}

var File_ton_dex_block_message_proto protoreflect.FileDescriptor

var file_ton_dex_block_message_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x74, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x78, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x74,
	0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x17, 0x74, 0x6f, 0x6e,
	0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x74, 0x6f, 0x6e, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x74,
	0x6f, 0x6e, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x02, 0x0a,
	0x07, 0x44, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0d, 0x53, 0x6d, 0x61, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x0d, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x46, 0x65, 0x65, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x0c, 0x46, 0x65, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52,
	0x49, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x9d, 0x01, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x69, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x06, 0x53, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x05, 0x42, 0x75, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x05, 0x42, 0x75,
	0x79, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x06, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x46,
	0x65, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x05, 0x50, 0x61, 0x79, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x05, 0x50, 0x61, 0x79, 0x65, 0x72, 0x12, 0x35,
	0x0a, 0x09, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x09, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xd9, 0x05, 0x0a, 0x08, 0x44, 0x65, 0x78, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x4d, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x6f, 0x6e,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x10, 0x54, 0x72, 0x61, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x10, 0x54, 0x72, 0x61, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e,
	0x0a, 0x09, 0x49, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x49, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x48,
	0x0a, 0x0e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x01, 0x52, 0x0e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x03, 0x44, 0x65, 0x78, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x44, 0x65,
	0x78, 0x12, 0x29, 0x0a, 0x03, 0x42, 0x75, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x52, 0x03, 0x42, 0x75, 0x79, 0x12, 0x2b, 0x0a, 0x04,
	0x53, 0x65, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x6f, 0x6e,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x69, 0x64, 0x65, 0x52, 0x04, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x2f, 0x0a, 0x06, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x6f, 0x6e, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x52, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x46, 0x65, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x46, 0x65, 0x65, 0x52, 0x04, 0x46, 0x65, 0x65, 0x73,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x49, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x6c, 0x0a, 0x0f, 0x44, 0x65, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12,
	0x2e, 0x0a, 0x06, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44,
	0x65, 0x78, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ton_dex_block_message_proto_rawDescOnce sync.Once
	file_ton_dex_block_message_proto_rawDescData = file_ton_dex_block_message_proto_rawDesc
)

func file_ton_dex_block_message_proto_rawDescGZIP() []byte {
	file_ton_dex_block_message_proto_rawDescOnce.Do(func() {
		file_ton_dex_block_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_ton_dex_block_message_proto_rawDescData)
	})
	return file_ton_dex_block_message_proto_rawDescData
}

var file_ton_dex_block_message_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_ton_dex_block_message_proto_goTypes = []any{
	(*DexInfo)(nil),           // 0: ton_messages.DexInfo
	(*TradeAsset)(nil),        // 1: ton_messages.TradeAsset
	(*TradeSide)(nil),         // 2: ton_messages.TradeSide
	(*TradeFee)(nil),          // 3: ton_messages.TradeFee
	(*DexTrade)(nil),          // 4: ton_messages.DexTrade
	(*DexBlockMessage)(nil),   // 5: ton_messages.DexBlockMessage
	(*AccountID)(nil),         // 6: ton_messages.AccountID
	(*TokenInfo)(nil),         // 7: ton_messages.TokenInfo
	(*BlockHeader)(nil),       // 8: ton_messages.BlockHeader
	(*ParsedTransaction)(nil), // 9: ton_messages.ParsedTransaction
	(*ParsedMessage)(nil),     // 10: ton_messages.ParsedMessage
	(*Chain)(nil),             // 11: ton_messages.Chain
}
var file_ton_dex_block_message_proto_depIdxs = []int32{
	6,  // 0: ton_messages.DexInfo.SmartContract:type_name -> ton_messages.AccountID
	6,  // 1: ton_messages.DexInfo.FeeRecipient:type_name -> ton_messages.AccountID
	7,  // 2: ton_messages.DexInfo.Currencies:type_name -> ton_messages.TokenInfo
	7,  // 3: ton_messages.TradeAsset.Currency:type_name -> ton_messages.TokenInfo
	6,  // 4: ton_messages.TradeSide.Seller:type_name -> ton_messages.AccountID
	6,  // 5: ton_messages.TradeSide.Buyer:type_name -> ton_messages.AccountID
	1,  // 6: ton_messages.TradeSide.Assets:type_name -> ton_messages.TradeAsset
	7,  // 7: ton_messages.TradeFee.Currency:type_name -> ton_messages.TokenInfo
	6,  // 8: ton_messages.TradeFee.Payer:type_name -> ton_messages.AccountID
	6,  // 9: ton_messages.TradeFee.Recipient:type_name -> ton_messages.AccountID
	8,  // 10: ton_messages.DexTrade.BlockHeader:type_name -> ton_messages.BlockHeader
	9,  // 11: ton_messages.DexTrade.ParsedTransaction:type_name -> ton_messages.ParsedTransaction
	8,  // 12: ton_messages.DexTrade.TradeBlockHeader:type_name -> ton_messages.BlockHeader
	9,  // 13: ton_messages.DexTrade.TradeParsedTransaction:type_name -> ton_messages.ParsedTransaction
	10, // 14: ton_messages.DexTrade.InMessage:type_name -> ton_messages.ParsedMessage
	10, // 15: ton_messages.DexTrade.TradeInMessage:type_name -> ton_messages.ParsedMessage
	0,  // 16: ton_messages.DexTrade.Dex:type_name -> ton_messages.DexInfo
	2,  // 17: ton_messages.DexTrade.Buy:type_name -> ton_messages.TradeSide
	2,  // 18: ton_messages.DexTrade.Sell:type_name -> ton_messages.TradeSide
	6,  // 19: ton_messages.DexTrade.Sender:type_name -> ton_messages.AccountID
	3,  // 20: ton_messages.DexTrade.Fees:type_name -> ton_messages.TradeFee
	11, // 21: ton_messages.DexBlockMessage.Chain:type_name -> ton_messages.Chain
	4,  // 22: ton_messages.DexBlockMessage.Trades:type_name -> ton_messages.DexTrade
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_ton_dex_block_message_proto_init() }
func file_ton_dex_block_message_proto_init() {
	if File_ton_dex_block_message_proto != nil {
		return
	}
	file_ton_block_message_proto_init()
	file_ton_event_message_proto_init()
	file_ton_token_block_message_proto_init()
	file_ton_dex_block_message_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ton_dex_block_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ton_dex_block_message_proto_goTypes,
		DependencyIndexes: file_ton_dex_block_message_proto_depIdxs,
		MessageInfos:      file_ton_dex_block_message_proto_msgTypes,
	}.Build()
	File_ton_dex_block_message_proto = out.File
	file_ton_dex_block_message_proto_rawDesc = nil
	file_ton_dex_block_message_proto_goTypes = nil
	file_ton_dex_block_message_proto_depIdxs = nil
}
