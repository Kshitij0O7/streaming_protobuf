// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: tron/block_message.proto

package tron_messages

import (
	messages "evm/messages"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Tx message
type TransactionHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash       []byte   `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Fee        int64    `protobuf:"varint,2,opt,name=Fee,proto3" json:"Fee,omitempty"`
	Index      int32    `protobuf:"varint,3,opt,name=Index,proto3" json:"Index,omitempty"`
	Expiration int64    `protobuf:"varint,4,opt,name=Expiration,proto3" json:"Expiration,omitempty"`
	Data       []byte   `protobuf:"bytes,5,opt,name=Data,proto3" json:"Data,omitempty"`
	FeeLimit   int64    `protobuf:"varint,6,opt,name=FeeLimit,proto3" json:"FeeLimit,omitempty"`
	Timestamp  int64    `protobuf:"varint,7,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Signatures [][]byte `protobuf:"bytes,8,rep,name=Signatures,proto3" json:"Signatures,omitempty"`
	// only applicable to broadcasted
	Time     *uint64 `protobuf:"varint,9,opt,name=Time,proto3,oneof" json:"Time,omitempty"`
	FeePayer []byte  `protobuf:"bytes,10,opt,name=FeePayer,proto3" json:"FeePayer,omitempty"`
}

func (x *TransactionHeader) Reset() {
	*x = TransactionHeader{}
	mi := &file_tron_block_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionHeader) ProtoMessage() {}

func (x *TransactionHeader) ProtoReflect() protoreflect.Message {
	mi := &file_tron_block_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionHeader.ProtoReflect.Descriptor instead.
func (*TransactionHeader) Descriptor() ([]byte, []int) {
	return file_tron_block_message_proto_rawDescGZIP(), []int{0}
}

func (x *TransactionHeader) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *TransactionHeader) GetFee() int64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *TransactionHeader) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TransactionHeader) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *TransactionHeader) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TransactionHeader) GetFeeLimit() int64 {
	if x != nil {
		return x.FeeLimit
	}
	return 0
}

func (x *TransactionHeader) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TransactionHeader) GetSignatures() [][]byte {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *TransactionHeader) GetTime() uint64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *TransactionHeader) GetFeePayer() []byte {
	if x != nil {
		return x.FeePayer
	}
	return nil
}

type Argument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Types that are assignable to Value:
	//
	//	*Argument_String_
	//	*Argument_UInt
	//	*Argument_Float
	Value isArgument_Value `protobuf_oneof:"Value"`
}

func (x *Argument) Reset() {
	*x = Argument{}
	mi := &file_tron_block_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Argument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Argument) ProtoMessage() {}

func (x *Argument) ProtoReflect() protoreflect.Message {
	mi := &file_tron_block_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Argument.ProtoReflect.Descriptor instead.
func (*Argument) Descriptor() ([]byte, []int) {
	return file_tron_block_message_proto_rawDescGZIP(), []int{1}
}

func (x *Argument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *Argument) GetValue() isArgument_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Argument) GetString_() string {
	if x, ok := x.GetValue().(*Argument_String_); ok {
		return x.String_
	}
	return ""
}

func (x *Argument) GetUInt() uint64 {
	if x, ok := x.GetValue().(*Argument_UInt); ok {
		return x.UInt
	}
	return 0
}

func (x *Argument) GetFloat() float64 {
	if x, ok := x.GetValue().(*Argument_Float); ok {
		return x.Float
	}
	return 0
}

type isArgument_Value interface {
	isArgument_Value()
}

type Argument_String_ struct {
	String_ string `protobuf:"bytes,2,opt,name=String,proto3,oneof"`
}

type Argument_UInt struct {
	UInt uint64 `protobuf:"varint,3,opt,name=UInt,proto3,oneof"`
}

type Argument_Float struct {
	Float float64 `protobuf:"fixed64,4,opt,name=Float,proto3,oneof"`
}

func (*Argument_String_) isArgument_Value() {}

func (*Argument_UInt) isArgument_Value() {}

func (*Argument_Float) isArgument_Value() {}

type TransactionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *TransactionResult) Reset() {
	*x = TransactionResult{}
	mi := &file_tron_block_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionResult) ProtoMessage() {}

func (x *TransactionResult) ProtoReflect() protoreflect.Message {
	mi := &file_tron_block_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionResult.ProtoReflect.Descriptor instead.
func (*TransactionResult) Descriptor() ([]byte, []int) {
	return file_tron_block_message_proto_rawDescGZIP(), []int{2}
}

func (x *TransactionResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TransactionResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TransactionResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Receipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result             string `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	EnergyPenaltyTotal int64  `protobuf:"varint,2,opt,name=EnergyPenaltyTotal,proto3" json:"EnergyPenaltyTotal,omitempty"`
	EnergyFee          int64  `protobuf:"varint,3,opt,name=EnergyFee,proto3" json:"EnergyFee,omitempty"`
	EnergyUsageTotal   int64  `protobuf:"varint,4,opt,name=EnergyUsageTotal,proto3" json:"EnergyUsageTotal,omitempty"`
	OriginEnergyUsage  int64  `protobuf:"varint,5,opt,name=OriginEnergyUsage,proto3" json:"OriginEnergyUsage,omitempty"`
	NetUsage           int64  `protobuf:"varint,6,opt,name=NetUsage,proto3" json:"NetUsage,omitempty"`
	NetFee             int64  `protobuf:"varint,7,opt,name=NetFee,proto3" json:"NetFee,omitempty"`
}

func (x *Receipt) Reset() {
	*x = Receipt{}
	mi := &file_tron_block_message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Receipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Receipt) ProtoMessage() {}

func (x *Receipt) ProtoReflect() protoreflect.Message {
	mi := &file_tron_block_message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Receipt.ProtoReflect.Descriptor instead.
func (*Receipt) Descriptor() ([]byte, []int) {
	return file_tron_block_message_proto_rawDescGZIP(), []int{3}
}

func (x *Receipt) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *Receipt) GetEnergyPenaltyTotal() int64 {
	if x != nil {
		return x.EnergyPenaltyTotal
	}
	return 0
}

func (x *Receipt) GetEnergyFee() int64 {
	if x != nil {
		return x.EnergyFee
	}
	return 0
}

func (x *Receipt) GetEnergyUsageTotal() int64 {
	if x != nil {
		return x.EnergyUsageTotal
	}
	return 0
}

func (x *Receipt) GetOriginEnergyUsage() int64 {
	if x != nil {
		return x.OriginEnergyUsage
	}
	return 0
}

func (x *Receipt) GetNetUsage() int64 {
	if x != nil {
		return x.NetUsage
	}
	return 0
}

func (x *Receipt) GetNetFee() int64 {
	if x != nil {
		return x.NetFee
	}
	return 0
}

type Contract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address              []byte                 `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	ExecutionResults     [][]byte               `protobuf:"bytes,2,rep,name=ExecutionResults,proto3" json:"ExecutionResults,omitempty"`
	Type                 string                 `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	TypeUrl              string                 `protobuf:"bytes,4,opt,name=TypeUrl,proto3" json:"TypeUrl,omitempty"`
	Arguments            []*Argument            `protobuf:"bytes,5,rep,name=Arguments,proto3" json:"Arguments,omitempty"`
	InternalTransactions []*InternalTransaction `protobuf:"bytes,6,rep,name=InternalTransactions,proto3" json:"InternalTransactions,omitempty"`
	Logs                 []*messages.Log        `protobuf:"bytes,7,rep,name=Logs,proto3" json:"Logs,omitempty"`
	Trace                *messages.Trace        `protobuf:"bytes,8,opt,name=Trace,proto3" json:"Trace,omitempty"`
	// It stores information about users who have received a reward for
	// participating in block processing.
	// They can do this by calling WithdrawnBalanceContract.
	RewardWithdraw *RewardWithdraw `protobuf:"bytes,9,opt,name=RewardWithdraw,proto3" json:"RewardWithdraw,omitempty"`
}

func (x *Contract) Reset() {
	*x = Contract{}
	mi := &file_tron_block_message_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Contract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract) ProtoMessage() {}

func (x *Contract) ProtoReflect() protoreflect.Message {
	mi := &file_tron_block_message_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract.ProtoReflect.Descriptor instead.
func (*Contract) Descriptor() ([]byte, []int) {
	return file_tron_block_message_proto_rawDescGZIP(), []int{4}
}

func (x *Contract) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Contract) GetExecutionResults() [][]byte {
	if x != nil {
		return x.ExecutionResults
	}
	return nil
}

func (x *Contract) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Contract) GetTypeUrl() string {
	if x != nil {
		return x.TypeUrl
	}
	return ""
}

func (x *Contract) GetArguments() []*Argument {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *Contract) GetInternalTransactions() []*InternalTransaction {
	if x != nil {
		return x.InternalTransactions
	}
	return nil
}

func (x *Contract) GetLogs() []*messages.Log {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *Contract) GetTrace() *messages.Trace {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *Contract) GetRewardWithdraw() *RewardWithdraw {
	if x != nil {
		return x.RewardWithdraw
	}
	return nil
}

type CancelUnfreezeV2Amount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *CancelUnfreezeV2Amount) Reset() {
	*x = CancelUnfreezeV2Amount{}
	mi := &file_tron_block_message_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelUnfreezeV2Amount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelUnfreezeV2Amount) ProtoMessage() {}

func (x *CancelUnfreezeV2Amount) ProtoReflect() protoreflect.Message {
	mi := &file_tron_block_message_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelUnfreezeV2Amount.ProtoReflect.Descriptor instead.
func (*CancelUnfreezeV2Amount) Descriptor() ([]byte, []int) {
	return file_tron_block_message_proto_rawDescGZIP(), []int{5}
}

func (x *CancelUnfreezeV2Amount) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CancelUnfreezeV2Amount) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte   `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Data    []byte   `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	Topics  [][]byte `protobuf:"bytes,3,rep,name=Topics,proto3" json:"Topics,omitempty"`
	Index   int32    `protobuf:"varint,4,opt,name=Index,proto3" json:"Index,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	mi := &file_tron_block_message_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_tron_block_message_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_tron_block_message_proto_rawDescGZIP(), []int{6}
}

func (x *Log) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Log) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Log) GetTopics() [][]byte {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *Log) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type CallValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallValue int64  `protobuf:"varint,1,opt,name=CallValue,proto3" json:"CallValue,omitempty"`
	TokenId   string `protobuf:"bytes,2,opt,name=TokenId,proto3" json:"TokenId,omitempty"`
}

func (x *CallValue) Reset() {
	*x = CallValue{}
	mi := &file_tron_block_message_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallValue) ProtoMessage() {}

func (x *CallValue) ProtoReflect() protoreflect.Message {
	mi := &file_tron_block_message_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallValue.ProtoReflect.Descriptor instead.
func (*CallValue) Descriptor() ([]byte, []int) {
	return file_tron_block_message_proto_rawDescGZIP(), []int{7}
}

func (x *CallValue) GetCallValue() int64 {
	if x != nil {
		return x.CallValue
	}
	return 0
}

func (x *CallValue) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

type InternalTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallerAddress     []byte       `protobuf:"bytes,1,opt,name=CallerAddress,proto3" json:"CallerAddress,omitempty"`
	Note              string       `protobuf:"bytes,2,opt,name=Note,proto3" json:"Note,omitempty"`
	TransferToAddress []byte       `protobuf:"bytes,3,opt,name=TransferToAddress,proto3" json:"TransferToAddress,omitempty"`
	CallValues        []*CallValue `protobuf:"bytes,4,rep,name=CallValues,proto3" json:"CallValues,omitempty"`
	Hash              []byte       `protobuf:"bytes,5,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Index             int32        `protobuf:"varint,6,opt,name=Index,proto3" json:"Index,omitempty"`
}

func (x *InternalTransaction) Reset() {
	*x = InternalTransaction{}
	mi := &file_tron_block_message_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InternalTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalTransaction) ProtoMessage() {}

func (x *InternalTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_tron_block_message_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalTransaction.ProtoReflect.Descriptor instead.
func (*InternalTransaction) Descriptor() ([]byte, []int) {
	return file_tron_block_message_proto_rawDescGZIP(), []int{8}
}

func (x *InternalTransaction) GetCallerAddress() []byte {
	if x != nil {
		return x.CallerAddress
	}
	return nil
}

func (x *InternalTransaction) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *InternalTransaction) GetTransferToAddress() []byte {
	if x != nil {
		return x.TransferToAddress
	}
	return nil
}

func (x *InternalTransaction) GetCallValues() []*CallValue {
	if x != nil {
		return x.CallValues
	}
	return nil
}

func (x *InternalTransaction) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *InternalTransaction) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type RewardWithdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Receiver []byte `protobuf:"bytes,1,opt,name=Receiver,proto3" json:"Receiver,omitempty"`
	Amount   uint64 `protobuf:"varint,2,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (x *RewardWithdraw) Reset() {
	*x = RewardWithdraw{}
	mi := &file_tron_block_message_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RewardWithdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardWithdraw) ProtoMessage() {}

func (x *RewardWithdraw) ProtoReflect() protoreflect.Message {
	mi := &file_tron_block_message_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardWithdraw.ProtoReflect.Descriptor instead.
func (*RewardWithdraw) Descriptor() ([]byte, []int) {
	return file_tron_block_message_proto_rawDescGZIP(), []int{9}
}

func (x *RewardWithdraw) GetReceiver() []byte {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *RewardWithdraw) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// MORE INFORMATION: https://developers.tron.network/reference/gettransactioninfobyid-1
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *TransactionHeader `protobuf:"bytes,1,opt,name=Header,proto3" json:"Header,omitempty"`
	Result    *TransactionResult `protobuf:"bytes,2,opt,name=Result,proto3" json:"Result,omitempty"`
	Receipt   *Receipt           `protobuf:"bytes,3,opt,name=Receipt,proto3" json:"Receipt,omitempty"`
	Contracts []*Contract        `protobuf:"bytes,4,rep,name=Contracts,proto3" json:"Contracts,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	mi := &file_tron_block_message_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_tron_block_message_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_tron_block_message_proto_rawDescGZIP(), []int{10}
}

func (x *Transaction) GetHeader() *TransactionHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Transaction) GetResult() *TransactionResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *Transaction) GetReceipt() *Receipt {
	if x != nil {
		return x.Receipt
	}
	return nil
}

func (x *Transaction) GetContracts() []*Contract {
	if x != nil {
		return x.Contracts
	}
	return nil
}

// Block message
type BlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number            int64  `protobuf:"varint,1,opt,name=Number,proto3" json:"Number,omitempty"`
	Hash              []byte `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Timestamp         int64  `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	ParentHash        []byte `protobuf:"bytes,4,opt,name=ParentHash,proto3" json:"ParentHash,omitempty"`
	ParentNumber      int64  `protobuf:"varint,5,opt,name=ParentNumber,proto3" json:"ParentNumber,omitempty"`
	Version           int32  `protobuf:"varint,6,opt,name=Version,proto3" json:"Version,omitempty"`
	TxTrieRoot        []byte `protobuf:"bytes,7,opt,name=TxTrieRoot,proto3" json:"TxTrieRoot,omitempty"`
	AccountStateRoot  []byte `protobuf:"bytes,8,opt,name=AccountStateRoot,proto3" json:"AccountStateRoot,omitempty"`
	TransactionsCount uint32 `protobuf:"varint,9,opt,name=TransactionsCount,proto3" json:"TransactionsCount,omitempty"`
}

func (x *BlockHeader) Reset() {
	*x = BlockHeader{}
	mi := &file_tron_block_message_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeader) ProtoMessage() {}

func (x *BlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_tron_block_message_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeader.ProtoReflect.Descriptor instead.
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return file_tron_block_message_proto_rawDescGZIP(), []int{11}
}

func (x *BlockHeader) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *BlockHeader) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *BlockHeader) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BlockHeader) GetParentHash() []byte {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

func (x *BlockHeader) GetParentNumber() int64 {
	if x != nil {
		return x.ParentNumber
	}
	return 0
}

func (x *BlockHeader) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BlockHeader) GetTxTrieRoot() []byte {
	if x != nil {
		return x.TxTrieRoot
	}
	return nil
}

func (x *BlockHeader) GetAccountStateRoot() []byte {
	if x != nil {
		return x.AccountStateRoot
	}
	return nil
}

func (x *BlockHeader) GetTransactionsCount() uint32 {
	if x != nil {
		return x.TransactionsCount
	}
	return 0
}

// Information about witness (or validator) who packed this block.
type Witness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   []byte `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Id        int64  `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *Witness) Reset() {
	*x = Witness{}
	mi := &file_tron_block_message_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Witness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Witness) ProtoMessage() {}

func (x *Witness) ProtoReflect() protoreflect.Message {
	mi := &file_tron_block_message_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Witness.ProtoReflect.Descriptor instead.
func (*Witness) Descriptor() ([]byte, []int) {
	return file_tron_block_message_proto_rawDescGZIP(), []int{12}
}

func (x *Witness) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Witness) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Witness) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type Chain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId []byte `protobuf:"bytes,1,opt,name=ChainId,proto3" json:"ChainId,omitempty"`
}

func (x *Chain) Reset() {
	*x = Chain{}
	mi := &file_tron_block_message_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Chain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chain) ProtoMessage() {}

func (x *Chain) ProtoReflect() protoreflect.Message {
	mi := &file_tron_block_message_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chain.ProtoReflect.Descriptor instead.
func (*Chain) Descriptor() ([]byte, []int) {
	return file_tron_block_message_proto_rawDescGZIP(), []int{13}
}

func (x *Chain) GetChainId() []byte {
	if x != nil {
		return x.ChainId
	}
	return nil
}

// MORE INFORMATION: https://developers.tron.network/reference/getblock-2
type BlockMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain        *Chain         `protobuf:"bytes,1,opt,name=Chain,proto3" json:"Chain,omitempty"`
	Header       *BlockHeader   `protobuf:"bytes,2,opt,name=Header,proto3" json:"Header,omitempty"`
	Witness      *Witness       `protobuf:"bytes,3,opt,name=Witness,proto3" json:"Witness,omitempty"`
	Transactions []*Transaction `protobuf:"bytes,4,rep,name=Transactions,proto3" json:"Transactions,omitempty"`
}

func (x *BlockMessage) Reset() {
	*x = BlockMessage{}
	mi := &file_tron_block_message_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockMessage) ProtoMessage() {}

func (x *BlockMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tron_block_message_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockMessage.ProtoReflect.Descriptor instead.
func (*BlockMessage) Descriptor() ([]byte, []int) {
	return file_tron_block_message_proto_rawDescGZIP(), []int{14}
}

func (x *BlockMessage) GetChain() *Chain {
	if x != nil {
		return x.Chain
	}
	return nil
}

func (x *BlockMessage) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BlockMessage) GetWitness() *Witness {
	if x != nil {
		return x.Witness
	}
	return nil
}

func (x *BlockMessage) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

var File_tron_block_message_proto protoreflect.FileDescriptor

var file_tron_block_message_proto_rawDesc = []byte{
	0x0a, 0x18, 0x74, 0x72, 0x6f, 0x6e, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x74, 0x72, 0x6f, 0x6e,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x17, 0x65, 0x76, 0x6d, 0x2f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x9b, 0x02, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x10, 0x0a, 0x03,
	0x46, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x46, 0x65, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x46, 0x65, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x46,
	0x65, 0x65, 0x50, 0x61, 0x79, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x46,
	0x65, 0x65, 0x50, 0x61, 0x79, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x6f, 0x0a, 0x08, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x04, 0x55, 0x49,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x04, 0x55, 0x49, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x00, 0x52, 0x05, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x5f, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xfd, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x46, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x45, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x46, 0x65, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x65,
	0x74, 0x46, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4e, 0x65, 0x74, 0x46,
	0x65, 0x65, 0x22, 0xa6, 0x03, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x10, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x79, 0x70,
	0x65, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x79, 0x70, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x09, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x09, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x14, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x4c, 0x6f, 0x67, 0x52, 0x04, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x6d, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x0e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x22, 0x40, 0x0a, 0x16, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x56, 0x32, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x61, 0x0a,
	0x03, 0x4c, 0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x06, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x43, 0x0a, 0x09, 0x43, 0x61, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x61, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x43, 0x61, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x64, 0x22, 0xe1, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x0d, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x44, 0x0a, 0x0e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xea, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x07, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x22, 0xaf, 0x02, 0x0a,
	0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x78, 0x54, 0x72, 0x69, 0x65, 0x52, 0x6f,
	0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x54, 0x78, 0x54, 0x72, 0x69, 0x65,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x51,
	0x0a, 0x07, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0x21, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x22, 0xe0, 0x01, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x05, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x12, 0x32, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x07,
	0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x74, 0x72, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x21, 0x0a, 0x12, 0x69, 0x6f, 0x2e, 0x62, 0x69,
	0x74, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x42, 0x0b, 0x54,
	0x72, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_tron_block_message_proto_rawDescOnce sync.Once
	file_tron_block_message_proto_rawDescData = file_tron_block_message_proto_rawDesc
)

func file_tron_block_message_proto_rawDescGZIP() []byte {
	file_tron_block_message_proto_rawDescOnce.Do(func() {
		file_tron_block_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_tron_block_message_proto_rawDescData)
	})
	return file_tron_block_message_proto_rawDescData
}

var file_tron_block_message_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_tron_block_message_proto_goTypes = []any{
	(*TransactionHeader)(nil),      // 0: tron_messages.TransactionHeader
	(*Argument)(nil),               // 1: tron_messages.Argument
	(*TransactionResult)(nil),      // 2: tron_messages.TransactionResult
	(*Receipt)(nil),                // 3: tron_messages.Receipt
	(*Contract)(nil),               // 4: tron_messages.Contract
	(*CancelUnfreezeV2Amount)(nil), // 5: tron_messages.CancelUnfreezeV2Amount
	(*Log)(nil),                    // 6: tron_messages.Log
	(*CallValue)(nil),              // 7: tron_messages.CallValue
	(*InternalTransaction)(nil),    // 8: tron_messages.InternalTransaction
	(*RewardWithdraw)(nil),         // 9: tron_messages.RewardWithdraw
	(*Transaction)(nil),            // 10: tron_messages.Transaction
	(*BlockHeader)(nil),            // 11: tron_messages.BlockHeader
	(*Witness)(nil),                // 12: tron_messages.Witness
	(*Chain)(nil),                  // 13: tron_messages.Chain
	(*BlockMessage)(nil),           // 14: tron_messages.BlockMessage
	(*messages.Log)(nil),           // 15: evm_messages.Log
	(*messages.Trace)(nil),         // 16: evm_messages.Trace
}
var file_tron_block_message_proto_depIdxs = []int32{
	1,  // 0: tron_messages.Contract.Arguments:type_name -> tron_messages.Argument
	8,  // 1: tron_messages.Contract.InternalTransactions:type_name -> tron_messages.InternalTransaction
	15, // 2: tron_messages.Contract.Logs:type_name -> evm_messages.Log
	16, // 3: tron_messages.Contract.Trace:type_name -> evm_messages.Trace
	9,  // 4: tron_messages.Contract.RewardWithdraw:type_name -> tron_messages.RewardWithdraw
	7,  // 5: tron_messages.InternalTransaction.CallValues:type_name -> tron_messages.CallValue
	0,  // 6: tron_messages.Transaction.Header:type_name -> tron_messages.TransactionHeader
	2,  // 7: tron_messages.Transaction.Result:type_name -> tron_messages.TransactionResult
	3,  // 8: tron_messages.Transaction.Receipt:type_name -> tron_messages.Receipt
	4,  // 9: tron_messages.Transaction.Contracts:type_name -> tron_messages.Contract
	13, // 10: tron_messages.BlockMessage.Chain:type_name -> tron_messages.Chain
	11, // 11: tron_messages.BlockMessage.Header:type_name -> tron_messages.BlockHeader
	12, // 12: tron_messages.BlockMessage.Witness:type_name -> tron_messages.Witness
	10, // 13: tron_messages.BlockMessage.Transactions:type_name -> tron_messages.Transaction
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_tron_block_message_proto_init() }
func file_tron_block_message_proto_init() {
	if File_tron_block_message_proto != nil {
		return
	}
	file_tron_block_message_proto_msgTypes[0].OneofWrappers = []any{}
	file_tron_block_message_proto_msgTypes[1].OneofWrappers = []any{
		(*Argument_String_)(nil),
		(*Argument_UInt)(nil),
		(*Argument_Float)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tron_block_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tron_block_message_proto_goTypes,
		DependencyIndexes: file_tron_block_message_proto_depIdxs,
		MessageInfos:      file_tron_block_message_proto_msgTypes,
	}.Build()
	File_tron_block_message_proto = out.File
	file_tron_block_message_proto_rawDesc = nil
	file_tron_block_message_proto_goTypes = nil
	file_tron_block_message_proto_depIdxs = nil
}
